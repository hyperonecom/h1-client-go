/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Billing struct for Billing
type Billing struct {
	Id *string `json:"id,omitempty"`
	Period *string `json:"period,omitempty"`
	Price *float32 `json:"price,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
	Project *string `json:"project,omitempty"`
	OneTime *bool `json:"oneTime,omitempty"`
	Service *BillingService `json:"service,omitempty"`
	Resource *BillingResource `json:"resource,omitempty"`
	Charges []BillingCharges `json:"charges,omitempty"`
}

// NewBilling instantiates a new Billing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBilling() *Billing {
	this := Billing{}
	return &this
}

// NewBillingWithDefaults instantiates a new Billing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingWithDefaults() *Billing {
	this := Billing{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Billing) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Billing) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Billing) SetId(v string) {
	o.Id = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Billing) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Billing) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *Billing) SetPeriod(v string) {
	o.Period = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Billing) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Billing) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Billing) SetPrice(v float32) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Billing) GetQuantity() float32 {
	if o == nil || o.Quantity == nil {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetQuantityOk() (*float32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Billing) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *Billing) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Billing) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Billing) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *Billing) SetProject(v string) {
	o.Project = &v
}

// GetOneTime returns the OneTime field value if set, zero value otherwise.
func (o *Billing) GetOneTime() bool {
	if o == nil || o.OneTime == nil {
		var ret bool
		return ret
	}
	return *o.OneTime
}

// GetOneTimeOk returns a tuple with the OneTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetOneTimeOk() (*bool, bool) {
	if o == nil || o.OneTime == nil {
		return nil, false
	}
	return o.OneTime, true
}

// HasOneTime returns a boolean if a field has been set.
func (o *Billing) HasOneTime() bool {
	if o != nil && o.OneTime != nil {
		return true
	}

	return false
}

// SetOneTime gets a reference to the given bool and assigns it to the OneTime field.
func (o *Billing) SetOneTime(v bool) {
	o.OneTime = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *Billing) GetService() BillingService {
	if o == nil || o.Service == nil {
		var ret BillingService
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetServiceOk() (*BillingService, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *Billing) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given BillingService and assigns it to the Service field.
func (o *Billing) SetService(v BillingService) {
	o.Service = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Billing) GetResource() BillingResource {
	if o == nil || o.Resource == nil {
		var ret BillingResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetResourceOk() (*BillingResource, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Billing) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given BillingResource and assigns it to the Resource field.
func (o *Billing) SetResource(v BillingResource) {
	o.Resource = &v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *Billing) GetCharges() []BillingCharges {
	if o == nil || o.Charges == nil {
		var ret []BillingCharges
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Billing) GetChargesOk() ([]BillingCharges, bool) {
	if o == nil || o.Charges == nil {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *Billing) HasCharges() bool {
	if o != nil && o.Charges != nil {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []BillingCharges and assigns it to the Charges field.
func (o *Billing) SetCharges(v []BillingCharges) {
	o.Charges = v
}

func (o Billing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.OneTime != nil {
		toSerialize["oneTime"] = o.OneTime
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.Charges != nil {
		toSerialize["charges"] = o.Charges
	}
	return json.Marshal(toSerialize)
}

type NullableBilling struct {
	value *Billing
	isSet bool
}

func (v NullableBilling) Get() *Billing {
	return v.value
}

func (v *NullableBilling) Set(val *Billing) {
	v.value = val
	v.isSet = true
}

func (v NullableBilling) IsSet() bool {
	return v.isSet
}

func (v *NullableBilling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBilling(val *Billing) *NullableBilling {
	return &NullableBilling{value: val, isSet: true}
}

func (v NullableBilling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBilling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


