/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// ProjectFeature struct for ProjectFeature
type ProjectFeature struct {
	EarlyAdopter *bool `json:"earlyAdopter,omitempty"`
}

// NewProjectFeature instantiates a new ProjectFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectFeature() *ProjectFeature {
	this := ProjectFeature{}
	var earlyAdopter bool = false
	this.EarlyAdopter = &earlyAdopter
	return &this
}

// NewProjectFeatureWithDefaults instantiates a new ProjectFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectFeatureWithDefaults() *ProjectFeature {
	this := ProjectFeature{}
	var earlyAdopter bool = false
	this.EarlyAdopter = &earlyAdopter
	return &this
}

// GetEarlyAdopter returns the EarlyAdopter field value if set, zero value otherwise.
func (o *ProjectFeature) GetEarlyAdopter() bool {
	if o == nil || o.EarlyAdopter == nil {
		var ret bool
		return ret
	}
	return *o.EarlyAdopter
}

// GetEarlyAdopterOk returns a tuple with the EarlyAdopter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectFeature) GetEarlyAdopterOk() (*bool, bool) {
	if o == nil || o.EarlyAdopter == nil {
		return nil, false
	}
	return o.EarlyAdopter, true
}

// HasEarlyAdopter returns a boolean if a field has been set.
func (o *ProjectFeature) HasEarlyAdopter() bool {
	if o != nil && o.EarlyAdopter != nil {
		return true
	}

	return false
}

// SetEarlyAdopter gets a reference to the given bool and assigns it to the EarlyAdopter field.
func (o *ProjectFeature) SetEarlyAdopter(v bool) {
	o.EarlyAdopter = &v
}

func (o ProjectFeature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EarlyAdopter != nil {
		toSerialize["earlyAdopter"] = o.EarlyAdopter
	}
	return json.Marshal(toSerialize)
}

type NullableProjectFeature struct {
	value *ProjectFeature
	isSet bool
}

func (v NullableProjectFeature) Get() *ProjectFeature {
	return v.value
}

func (v *NullableProjectFeature) Set(val *ProjectFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectFeature(val *ProjectFeature) *NullableProjectFeature {
	return &NullableProjectFeature{value: val, isSet: true}
}

func (v NullableProjectFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


