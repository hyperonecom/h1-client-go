/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IamProjectRoleCreate struct for IamProjectRoleCreate
type IamProjectRoleCreate struct {
	Name string `json:"name"`
	Service *string `json:"service,omitempty"`
	Description *string `json:"description,omitempty"`
	Permission []IamPermission `json:"permission,omitempty"`
	Tag []Tag `json:"tag,omitempty"`
}

// NewIamProjectRoleCreate instantiates a new IamProjectRoleCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamProjectRoleCreate(name string) *IamProjectRoleCreate {
	this := IamProjectRoleCreate{}
	this.Name = name
	var service string = "5e679c282b39c4353cd86f34"
	this.Service = &service
	return &this
}

// NewIamProjectRoleCreateWithDefaults instantiates a new IamProjectRoleCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamProjectRoleCreateWithDefaults() *IamProjectRoleCreate {
	this := IamProjectRoleCreate{}
	var service string = "5e679c282b39c4353cd86f34"
	this.Service = &service
	return &this
}

// GetName returns the Name field value
func (o *IamProjectRoleCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IamProjectRoleCreate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IamProjectRoleCreate) SetName(v string) {
	o.Name = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *IamProjectRoleCreate) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamProjectRoleCreate) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *IamProjectRoleCreate) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *IamProjectRoleCreate) SetService(v string) {
	o.Service = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IamProjectRoleCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamProjectRoleCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IamProjectRoleCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IamProjectRoleCreate) SetDescription(v string) {
	o.Description = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *IamProjectRoleCreate) GetPermission() []IamPermission {
	if o == nil || o.Permission == nil {
		var ret []IamPermission
		return ret
	}
	return o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamProjectRoleCreate) GetPermissionOk() ([]IamPermission, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *IamProjectRoleCreate) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given []IamPermission and assigns it to the Permission field.
func (o *IamProjectRoleCreate) SetPermission(v []IamPermission) {
	o.Permission = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *IamProjectRoleCreate) GetTag() []Tag {
	if o == nil || o.Tag == nil {
		var ret []Tag
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamProjectRoleCreate) GetTagOk() ([]Tag, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *IamProjectRoleCreate) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given []Tag and assigns it to the Tag field.
func (o *IamProjectRoleCreate) SetTag(v []Tag) {
	o.Tag = v
}

func (o IamProjectRoleCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Permission != nil {
		toSerialize["permission"] = o.Permission
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	return json.Marshal(toSerialize)
}

type NullableIamProjectRoleCreate struct {
	value *IamProjectRoleCreate
	isSet bool
}

func (v NullableIamProjectRoleCreate) Get() *IamProjectRoleCreate {
	return v.value
}

func (v *NullableIamProjectRoleCreate) Set(val *IamProjectRoleCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableIamProjectRoleCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableIamProjectRoleCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamProjectRoleCreate(val *IamProjectRoleCreate) *NullableIamProjectRoleCreate {
	return &NullableIamProjectRoleCreate{value: val, isSet: true}
}

func (v NullableIamProjectRoleCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamProjectRoleCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


