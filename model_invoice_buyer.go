/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvoiceBuyer struct for InvoiceBuyer
type InvoiceBuyer struct {
	Address *InvoiceBuyerAddress `json:"address,omitempty"`
	Company string `json:"company"`
	Email *string `json:"email,omitempty"`
	Nip *string `json:"nip,omitempty"`
}

// NewInvoiceBuyer instantiates a new InvoiceBuyer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceBuyer(company string) *InvoiceBuyer {
	this := InvoiceBuyer{}
	this.Company = company
	return &this
}

// NewInvoiceBuyerWithDefaults instantiates a new InvoiceBuyer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceBuyerWithDefaults() *InvoiceBuyer {
	this := InvoiceBuyer{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *InvoiceBuyer) GetAddress() InvoiceBuyerAddress {
	if o == nil || o.Address == nil {
		var ret InvoiceBuyerAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceBuyer) GetAddressOk() (*InvoiceBuyerAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *InvoiceBuyer) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given InvoiceBuyerAddress and assigns it to the Address field.
func (o *InvoiceBuyer) SetAddress(v InvoiceBuyerAddress) {
	o.Address = &v
}

// GetCompany returns the Company field value
func (o *InvoiceBuyer) GetCompany() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *InvoiceBuyer) GetCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *InvoiceBuyer) SetCompany(v string) {
	o.Company = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *InvoiceBuyer) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceBuyer) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *InvoiceBuyer) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *InvoiceBuyer) SetEmail(v string) {
	o.Email = &v
}

// GetNip returns the Nip field value if set, zero value otherwise.
func (o *InvoiceBuyer) GetNip() string {
	if o == nil || o.Nip == nil {
		var ret string
		return ret
	}
	return *o.Nip
}

// GetNipOk returns a tuple with the Nip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceBuyer) GetNipOk() (*string, bool) {
	if o == nil || o.Nip == nil {
		return nil, false
	}
	return o.Nip, true
}

// HasNip returns a boolean if a field has been set.
func (o *InvoiceBuyer) HasNip() bool {
	if o != nil && o.Nip != nil {
		return true
	}

	return false
}

// SetNip gets a reference to the given string and assigns it to the Nip field.
func (o *InvoiceBuyer) SetNip(v string) {
	o.Nip = &v
}

func (o InvoiceBuyer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["company"] = o.Company
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Nip != nil {
		toSerialize["nip"] = o.Nip
	}
	return json.Marshal(toSerialize)
}

type NullableInvoiceBuyer struct {
	value *InvoiceBuyer
	isSet bool
}

func (v NullableInvoiceBuyer) Get() *InvoiceBuyer {
	return v.value
}

func (v *NullableInvoiceBuyer) Set(val *InvoiceBuyer) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceBuyer) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceBuyer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceBuyer(val *InvoiceBuyer) *NullableInvoiceBuyer {
	return &NullableInvoiceBuyer{value: val, isSet: true}
}

func (v NullableInvoiceBuyer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceBuyer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


