/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserLimitOrganisation struct for UserLimitOrganisation
type UserLimitOrganisation struct {
	Count float32 `json:"count"`
}

// NewUserLimitOrganisation instantiates a new UserLimitOrganisation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLimitOrganisation(count float32) *UserLimitOrganisation {
	this := UserLimitOrganisation{}
	this.Count = count
	return &this
}

// NewUserLimitOrganisationWithDefaults instantiates a new UserLimitOrganisation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLimitOrganisationWithDefaults() *UserLimitOrganisation {
	this := UserLimitOrganisation{}
	var count float32 = 3
	this.Count = count
	return &this
}

// GetCount returns the Count field value
func (o *UserLimitOrganisation) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *UserLimitOrganisation) GetCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *UserLimitOrganisation) SetCount(v float32) {
	o.Count = v
}

func (o UserLimitOrganisation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableUserLimitOrganisation struct {
	value *UserLimitOrganisation
	isSet bool
}

func (v NullableUserLimitOrganisation) Get() *UserLimitOrganisation {
	return v.value
}

func (v *NullableUserLimitOrganisation) Set(val *UserLimitOrganisation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLimitOrganisation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLimitOrganisation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLimitOrganisation(val *UserLimitOrganisation) *NullableUserLimitOrganisation {
	return &NullableUserLimitOrganisation{value: val, isSet: true}
}

func (v NullableUserLimitOrganisation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLimitOrganisation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


