/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServiceDisplayUnit struct for ServiceDisplayUnit
type ServiceDisplayUnit struct {
	Usage *string `json:"usage,omitempty"`
	Billing *string `json:"billing,omitempty"`
}

// NewServiceDisplayUnit instantiates a new ServiceDisplayUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceDisplayUnit() *ServiceDisplayUnit {
	this := ServiceDisplayUnit{}
	return &this
}

// NewServiceDisplayUnitWithDefaults instantiates a new ServiceDisplayUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceDisplayUnitWithDefaults() *ServiceDisplayUnit {
	this := ServiceDisplayUnit{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ServiceDisplayUnit) GetUsage() string {
	if o == nil || o.Usage == nil {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDisplayUnit) GetUsageOk() (*string, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ServiceDisplayUnit) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *ServiceDisplayUnit) SetUsage(v string) {
	o.Usage = &v
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *ServiceDisplayUnit) GetBilling() string {
	if o == nil || o.Billing == nil {
		var ret string
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDisplayUnit) GetBillingOk() (*string, bool) {
	if o == nil || o.Billing == nil {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *ServiceDisplayUnit) HasBilling() bool {
	if o != nil && o.Billing != nil {
		return true
	}

	return false
}

// SetBilling gets a reference to the given string and assigns it to the Billing field.
func (o *ServiceDisplayUnit) SetBilling(v string) {
	o.Billing = &v
}

func (o ServiceDisplayUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	if o.Billing != nil {
		toSerialize["billing"] = o.Billing
	}
	return json.Marshal(toSerialize)
}

type NullableServiceDisplayUnit struct {
	value *ServiceDisplayUnit
	isSet bool
}

func (v NullableServiceDisplayUnit) Get() *ServiceDisplayUnit {
	return v.value
}

func (v *NullableServiceDisplayUnit) Set(val *ServiceDisplayUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceDisplayUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceDisplayUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceDisplayUnit(val *ServiceDisplayUnit) *NullableServiceDisplayUnit {
	return &NullableServiceDisplayUnit{value: val, isSet: true}
}

func (v NullableServiceDisplayUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceDisplayUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


