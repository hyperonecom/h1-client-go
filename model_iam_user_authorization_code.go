/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IamUserAuthorizationCode struct for IamUserAuthorizationCode
type IamUserAuthorizationCode struct {
	Redirect string `json:"redirect"`
	Nonce *string `json:"nonce,omitempty"`
}

// NewIamUserAuthorizationCode instantiates a new IamUserAuthorizationCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamUserAuthorizationCode(redirect string) *IamUserAuthorizationCode {
	this := IamUserAuthorizationCode{}
	this.Redirect = redirect
	return &this
}

// NewIamUserAuthorizationCodeWithDefaults instantiates a new IamUserAuthorizationCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamUserAuthorizationCodeWithDefaults() *IamUserAuthorizationCode {
	this := IamUserAuthorizationCode{}
	return &this
}

// GetRedirect returns the Redirect field value
func (o *IamUserAuthorizationCode) GetRedirect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value
// and a boolean to check if the value has been set.
func (o *IamUserAuthorizationCode) GetRedirectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Redirect, true
}

// SetRedirect sets field value
func (o *IamUserAuthorizationCode) SetRedirect(v string) {
	o.Redirect = v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *IamUserAuthorizationCode) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamUserAuthorizationCode) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *IamUserAuthorizationCode) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *IamUserAuthorizationCode) SetNonce(v string) {
	o.Nonce = &v
}

func (o IamUserAuthorizationCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["redirect"] = o.Redirect
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	return json.Marshal(toSerialize)
}

type NullableIamUserAuthorizationCode struct {
	value *IamUserAuthorizationCode
	isSet bool
}

func (v NullableIamUserAuthorizationCode) Get() *IamUserAuthorizationCode {
	return v.value
}

func (v *NullableIamUserAuthorizationCode) Set(val *IamUserAuthorizationCode) {
	v.value = val
	v.isSet = true
}

func (v NullableIamUserAuthorizationCode) IsSet() bool {
	return v.isSet
}

func (v *NullableIamUserAuthorizationCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamUserAuthorizationCode(val *IamUserAuthorizationCode) *NullableIamUserAuthorizationCode {
	return &NullableIamUserAuthorizationCode{value: val, isSet: true}
}

func (v NullableIamUserAuthorizationCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamUserAuthorizationCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


