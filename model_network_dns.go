/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkDns struct for NetworkDns
type NetworkDns struct {
	Nameservers []string `json:"nameservers,omitempty"`
}

// NewNetworkDns instantiates a new NetworkDns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDns() *NetworkDns {
	this := NetworkDns{}
	return &this
}

// NewNetworkDnsWithDefaults instantiates a new NetworkDns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDnsWithDefaults() *NetworkDns {
	this := NetworkDns{}
	return &this
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *NetworkDns) GetNameservers() []string {
	if o == nil || o.Nameservers == nil {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDns) GetNameserversOk() ([]string, bool) {
	if o == nil || o.Nameservers == nil {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *NetworkDns) HasNameservers() bool {
	if o != nil && o.Nameservers != nil {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *NetworkDns) SetNameservers(v []string) {
	o.Nameservers = v
}

func (o NetworkDns) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nameservers != nil {
		toSerialize["nameservers"] = o.Nameservers
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkDns struct {
	value *NetworkDns
	isSet bool
}

func (v NullableNetworkDns) Get() *NetworkDns {
	return v.value
}

func (v *NullableNetworkDns) Set(val *NetworkDns) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDns) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDns(val *NetworkDns) *NullableNetworkDns {
	return &NullableNetworkDns{value: val, isSet: true}
}

func (v NullableNetworkDns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


