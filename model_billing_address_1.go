/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// BillingAddress1 struct for BillingAddress1
type BillingAddress1 struct {
	City *string `json:"city,omitempty"`
	Zipcode *string `json:"zipcode,omitempty"`
	Street *string `json:"street,omitempty"`
}

// NewBillingAddress1 instantiates a new BillingAddress1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingAddress1() *BillingAddress1 {
	this := BillingAddress1{}
	return &this
}

// NewBillingAddress1WithDefaults instantiates a new BillingAddress1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingAddress1WithDefaults() *BillingAddress1 {
	this := BillingAddress1{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *BillingAddress1) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress1) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *BillingAddress1) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *BillingAddress1) SetCity(v string) {
	o.City = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *BillingAddress1) GetZipcode() string {
	if o == nil || o.Zipcode == nil {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress1) GetZipcodeOk() (*string, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *BillingAddress1) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *BillingAddress1) SetZipcode(v string) {
	o.Zipcode = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *BillingAddress1) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress1) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *BillingAddress1) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *BillingAddress1) SetStreet(v string) {
	o.Street = &v
}

func (o BillingAddress1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	return json.Marshal(toSerialize)
}

type NullableBillingAddress1 struct {
	value *BillingAddress1
	isSet bool
}

func (v NullableBillingAddress1) Get() *BillingAddress1 {
	return v.value
}

func (v *NullableBillingAddress1) Set(val *BillingAddress1) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingAddress1) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingAddress1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingAddress1(val *BillingAddress1) *NullableBillingAddress1 {
	return &NullableBillingAddress1{value: val, isSet: true}
}

func (v NullableBillingAddress1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingAddress1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


