/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IsoMetadataSource struct for IsoMetadataSource
type IsoMetadataSource struct {
	Filename *string `json:"filename,omitempty"`
	Size *float32 `json:"size,omitempty"`
}

// NewIsoMetadataSource instantiates a new IsoMetadataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsoMetadataSource() *IsoMetadataSource {
	this := IsoMetadataSource{}
	return &this
}

// NewIsoMetadataSourceWithDefaults instantiates a new IsoMetadataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsoMetadataSourceWithDefaults() *IsoMetadataSource {
	this := IsoMetadataSource{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *IsoMetadataSource) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsoMetadataSource) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *IsoMetadataSource) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *IsoMetadataSource) SetFilename(v string) {
	o.Filename = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *IsoMetadataSource) GetSize() float32 {
	if o == nil || o.Size == nil {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsoMetadataSource) GetSizeOk() (*float32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *IsoMetadataSource) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *IsoMetadataSource) SetSize(v float32) {
	o.Size = &v
}

func (o IsoMetadataSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableIsoMetadataSource struct {
	value *IsoMetadataSource
	isSet bool
}

func (v NullableIsoMetadataSource) Get() *IsoMetadataSource {
	return v.value
}

func (v *NullableIsoMetadataSource) Set(val *IsoMetadataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIsoMetadataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIsoMetadataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsoMetadataSource(val *IsoMetadataSource) *NullableIsoMetadataSource {
	return &NullableIsoMetadataSource{value: val, isSet: true}
}

func (v NullableIsoMetadataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsoMetadataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


