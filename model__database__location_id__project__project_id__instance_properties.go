/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DatabaseLocationIdProjectProjectIdInstanceProperties struct for DatabaseLocationIdProjectProjectIdInstanceProperties
type DatabaseLocationIdProjectProjectIdInstanceProperties struct {
	State *string `json:"state,omitempty"`
	Source *string `json:"source,omitempty"`
}

// NewDatabaseLocationIdProjectProjectIdInstanceProperties instantiates a new DatabaseLocationIdProjectProjectIdInstanceProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseLocationIdProjectProjectIdInstanceProperties() *DatabaseLocationIdProjectProjectIdInstanceProperties {
	this := DatabaseLocationIdProjectProjectIdInstanceProperties{}
	return &this
}

// NewDatabaseLocationIdProjectProjectIdInstancePropertiesWithDefaults instantiates a new DatabaseLocationIdProjectProjectIdInstanceProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseLocationIdProjectProjectIdInstancePropertiesWithDefaults() *DatabaseLocationIdProjectProjectIdInstanceProperties {
	this := DatabaseLocationIdProjectProjectIdInstanceProperties{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) SetState(v string) {
	o.State = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DatabaseLocationIdProjectProjectIdInstanceProperties) SetSource(v string) {
	o.Source = &v
}

func (o DatabaseLocationIdProjectProjectIdInstanceProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseLocationIdProjectProjectIdInstanceProperties struct {
	value *DatabaseLocationIdProjectProjectIdInstanceProperties
	isSet bool
}

func (v NullableDatabaseLocationIdProjectProjectIdInstanceProperties) Get() *DatabaseLocationIdProjectProjectIdInstanceProperties {
	return v.value
}

func (v *NullableDatabaseLocationIdProjectProjectIdInstanceProperties) Set(val *DatabaseLocationIdProjectProjectIdInstanceProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseLocationIdProjectProjectIdInstanceProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseLocationIdProjectProjectIdInstanceProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseLocationIdProjectProjectIdInstanceProperties(val *DatabaseLocationIdProjectProjectIdInstanceProperties) *NullableDatabaseLocationIdProjectProjectIdInstanceProperties {
	return &NullableDatabaseLocationIdProjectProjectIdInstanceProperties{value: val, isSet: true}
}

func (v NullableDatabaseLocationIdProjectProjectIdInstanceProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseLocationIdProjectProjectIdInstanceProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


