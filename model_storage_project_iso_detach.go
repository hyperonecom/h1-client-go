/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StorageProjectIsoDetach struct for StorageProjectIsoDetach
type StorageProjectIsoDetach struct {
	Vm string `json:"vm"`
}

// NewStorageProjectIsoDetach instantiates a new StorageProjectIsoDetach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageProjectIsoDetach(vm string) *StorageProjectIsoDetach {
	this := StorageProjectIsoDetach{}
	this.Vm = vm
	return &this
}

// NewStorageProjectIsoDetachWithDefaults instantiates a new StorageProjectIsoDetach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageProjectIsoDetachWithDefaults() *StorageProjectIsoDetach {
	this := StorageProjectIsoDetach{}
	return &this
}

// GetVm returns the Vm field value
func (o *StorageProjectIsoDetach) GetVm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vm
}

// GetVmOk returns a tuple with the Vm field value
// and a boolean to check if the value has been set.
func (o *StorageProjectIsoDetach) GetVmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vm, true
}

// SetVm sets field value
func (o *StorageProjectIsoDetach) SetVm(v string) {
	o.Vm = v
}

func (o StorageProjectIsoDetach) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vm"] = o.Vm
	}
	return json.Marshal(toSerialize)
}

type NullableStorageProjectIsoDetach struct {
	value *StorageProjectIsoDetach
	isSet bool
}

func (v NullableStorageProjectIsoDetach) Get() *StorageProjectIsoDetach {
	return v.value
}

func (v *NullableStorageProjectIsoDetach) Set(val *StorageProjectIsoDetach) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageProjectIsoDetach) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageProjectIsoDetach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageProjectIsoDetach(val *StorageProjectIsoDetach) *NullableStorageProjectIsoDetach {
	return &NullableStorageProjectIsoDetach{value: val, isSet: true}
}

func (v NullableStorageProjectIsoDetach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageProjectIsoDetach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


