/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ZoneRrsets struct for ZoneRrsets
type ZoneRrsets struct {
	Records *string `json:"records,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Ttl *float32 `json:"ttl,omitempty"`
}

// NewZoneRrsets instantiates a new ZoneRrsets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneRrsets() *ZoneRrsets {
	this := ZoneRrsets{}
	return &this
}

// NewZoneRrsetsWithDefaults instantiates a new ZoneRrsets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneRrsetsWithDefaults() *ZoneRrsets {
	this := ZoneRrsets{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *ZoneRrsets) GetRecords() string {
	if o == nil || o.Records == nil {
		var ret string
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRrsets) GetRecordsOk() (*string, bool) {
	if o == nil || o.Records == nil {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *ZoneRrsets) HasRecords() bool {
	if o != nil && o.Records != nil {
		return true
	}

	return false
}

// SetRecords gets a reference to the given string and assigns it to the Records field.
func (o *ZoneRrsets) SetRecords(v string) {
	o.Records = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ZoneRrsets) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRrsets) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ZoneRrsets) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ZoneRrsets) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ZoneRrsets) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRrsets) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ZoneRrsets) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ZoneRrsets) SetType(v string) {
	o.Type = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ZoneRrsets) GetTtl() float32 {
	if o == nil || o.Ttl == nil {
		var ret float32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneRrsets) GetTtlOk() (*float32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ZoneRrsets) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given float32 and assigns it to the Ttl field.
func (o *ZoneRrsets) SetTtl(v float32) {
	o.Ttl = &v
}

func (o ZoneRrsets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableZoneRrsets struct {
	value *ZoneRrsets
	isSet bool
}

func (v NullableZoneRrsets) Get() *ZoneRrsets {
	return v.value
}

func (v *NullableZoneRrsets) Set(val *ZoneRrsets) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneRrsets) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneRrsets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneRrsets(val *ZoneRrsets) *NullableZoneRrsets {
	return &NullableZoneRrsets{value: val, isSet: true}
}

func (v NullableZoneRrsets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneRrsets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


