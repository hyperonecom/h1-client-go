/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// NetworkingProjectNetworkUpdate struct for NetworkingProjectNetworkUpdate
type NetworkingProjectNetworkUpdate struct {
	Name *string `json:"name,omitempty"`
	Gateway *string `json:"gateway,omitempty"`
	Firewall *string `json:"firewall,omitempty"`
}

// NewNetworkingProjectNetworkUpdate instantiates a new NetworkingProjectNetworkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkingProjectNetworkUpdate() *NetworkingProjectNetworkUpdate {
	this := NetworkingProjectNetworkUpdate{}
	return &this
}

// NewNetworkingProjectNetworkUpdateWithDefaults instantiates a new NetworkingProjectNetworkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingProjectNetworkUpdateWithDefaults() *NetworkingProjectNetworkUpdate {
	this := NetworkingProjectNetworkUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkingProjectNetworkUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingProjectNetworkUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkingProjectNetworkUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkingProjectNetworkUpdate) SetName(v string) {
	o.Name = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *NetworkingProjectNetworkUpdate) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingProjectNetworkUpdate) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *NetworkingProjectNetworkUpdate) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *NetworkingProjectNetworkUpdate) SetGateway(v string) {
	o.Gateway = &v
}

// GetFirewall returns the Firewall field value if set, zero value otherwise.
func (o *NetworkingProjectNetworkUpdate) GetFirewall() string {
	if o == nil || o.Firewall == nil {
		var ret string
		return ret
	}
	return *o.Firewall
}

// GetFirewallOk returns a tuple with the Firewall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingProjectNetworkUpdate) GetFirewallOk() (*string, bool) {
	if o == nil || o.Firewall == nil {
		return nil, false
	}
	return o.Firewall, true
}

// HasFirewall returns a boolean if a field has been set.
func (o *NetworkingProjectNetworkUpdate) HasFirewall() bool {
	if o != nil && o.Firewall != nil {
		return true
	}

	return false
}

// SetFirewall gets a reference to the given string and assigns it to the Firewall field.
func (o *NetworkingProjectNetworkUpdate) SetFirewall(v string) {
	o.Firewall = &v
}

func (o NetworkingProjectNetworkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.Firewall != nil {
		toSerialize["firewall"] = o.Firewall
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkingProjectNetworkUpdate struct {
	value *NetworkingProjectNetworkUpdate
	isSet bool
}

func (v NullableNetworkingProjectNetworkUpdate) Get() *NetworkingProjectNetworkUpdate {
	return v.value
}

func (v *NullableNetworkingProjectNetworkUpdate) Set(val *NetworkingProjectNetworkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingProjectNetworkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingProjectNetworkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingProjectNetworkUpdate(val *NetworkingProjectNetworkUpdate) *NullableNetworkingProjectNetworkUpdate {
	return &NullableNetworkingProjectNetworkUpdate{value: val, isSet: true}
}

func (v NullableNetworkingProjectNetworkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingProjectNetworkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


