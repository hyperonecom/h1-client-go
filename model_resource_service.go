/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceService struct for ResourceService
type ResourceService struct {
	Billing *string `json:"billing,omitempty"`
	Data *map[string]string `json:"data,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	SourceService *string `json:"sourceService,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewResourceService instantiates a new ResourceService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceService() *ResourceService {
	this := ResourceService{}
	return &this
}

// NewResourceServiceWithDefaults instantiates a new ResourceService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceServiceWithDefaults() *ResourceService {
	this := ResourceService{}
	return &this
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *ResourceService) GetBilling() string {
	if o == nil || o.Billing == nil {
		var ret string
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceService) GetBillingOk() (*string, bool) {
	if o == nil || o.Billing == nil {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *ResourceService) HasBilling() bool {
	if o != nil && o.Billing != nil {
		return true
	}

	return false
}

// SetBilling gets a reference to the given string and assigns it to the Billing field.
func (o *ResourceService) SetBilling(v string) {
	o.Billing = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResourceService) GetData() map[string]string {
	if o == nil || o.Data == nil {
		var ret map[string]string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceService) GetDataOk() (*map[string]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResourceService) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]string and assigns it to the Data field.
func (o *ResourceService) SetData(v map[string]string) {
	o.Data = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceService) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceService) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceService) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceService) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceService) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceService) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceService) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceService) SetName(v string) {
	o.Name = &v
}

// GetSourceService returns the SourceService field value if set, zero value otherwise.
func (o *ResourceService) GetSourceService() string {
	if o == nil || o.SourceService == nil {
		var ret string
		return ret
	}
	return *o.SourceService
}

// GetSourceServiceOk returns a tuple with the SourceService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceService) GetSourceServiceOk() (*string, bool) {
	if o == nil || o.SourceService == nil {
		return nil, false
	}
	return o.SourceService, true
}

// HasSourceService returns a boolean if a field has been set.
func (o *ResourceService) HasSourceService() bool {
	if o != nil && o.SourceService != nil {
		return true
	}

	return false
}

// SetSourceService gets a reference to the given string and assigns it to the SourceService field.
func (o *ResourceService) SetSourceService(v string) {
	o.SourceService = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceService) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceService) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceService) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceService) SetType(v string) {
	o.Type = &v
}

func (o ResourceService) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Billing != nil {
		toSerialize["billing"] = o.Billing
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SourceService != nil {
		toSerialize["sourceService"] = o.SourceService
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableResourceService struct {
	value *ResourceService
	isSet bool
}

func (v NullableResourceService) Get() *ResourceService {
	return v.value
}

func (v *NullableResourceService) Set(val *ResourceService) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceService) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceService(val *ResourceService) *NullableResourceService {
	return &NullableResourceService{value: val, isSet: true}
}

func (v NullableResourceService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


