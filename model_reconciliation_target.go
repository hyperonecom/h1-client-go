/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReconciliationTarget struct for ReconciliationTarget
type ReconciliationTarget struct {
	Cost *float32 `json:"cost,omitempty"`
	Id *string `json:"id,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Measurement *string `json:"measurement,omitempty"`
	Profile *string `json:"profile,omitempty"`
	Resource []ReconciliationTargetResource `json:"resource,omitempty"`
	Usage *float32 `json:"usage,omitempty"`
}

// NewReconciliationTarget instantiates a new ReconciliationTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconciliationTarget() *ReconciliationTarget {
	this := ReconciliationTarget{}
	return &this
}

// NewReconciliationTargetWithDefaults instantiates a new ReconciliationTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconciliationTargetWithDefaults() *ReconciliationTarget {
	this := ReconciliationTarget{}
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *ReconciliationTarget) SetCost(v float32) {
	o.Cost = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReconciliationTarget) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ReconciliationTarget) SetKind(v string) {
	o.Kind = &v
}

// GetMeasurement returns the Measurement field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetMeasurement() string {
	if o == nil || o.Measurement == nil {
		var ret string
		return ret
	}
	return *o.Measurement
}

// GetMeasurementOk returns a tuple with the Measurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetMeasurementOk() (*string, bool) {
	if o == nil || o.Measurement == nil {
		return nil, false
	}
	return o.Measurement, true
}

// HasMeasurement returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasMeasurement() bool {
	if o != nil && o.Measurement != nil {
		return true
	}

	return false
}

// SetMeasurement gets a reference to the given string and assigns it to the Measurement field.
func (o *ReconciliationTarget) SetMeasurement(v string) {
	o.Measurement = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetProfile() string {
	if o == nil || o.Profile == nil {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetProfileOk() (*string, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *ReconciliationTarget) SetProfile(v string) {
	o.Profile = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetResource() []ReconciliationTargetResource {
	if o == nil || o.Resource == nil {
		var ret []ReconciliationTargetResource
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetResourceOk() ([]ReconciliationTargetResource, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given []ReconciliationTargetResource and assigns it to the Resource field.
func (o *ReconciliationTarget) SetResource(v []ReconciliationTargetResource) {
	o.Resource = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ReconciliationTarget) GetUsage() float32 {
	if o == nil || o.Usage == nil {
		var ret float32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTarget) GetUsageOk() (*float32, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ReconciliationTarget) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given float32 and assigns it to the Usage field.
func (o *ReconciliationTarget) SetUsage(v float32) {
	o.Usage = &v
}

func (o ReconciliationTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Measurement != nil {
		toSerialize["measurement"] = o.Measurement
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableReconciliationTarget struct {
	value *ReconciliationTarget
	isSet bool
}

func (v NullableReconciliationTarget) Get() *ReconciliationTarget {
	return v.value
}

func (v *NullableReconciliationTarget) Set(val *ReconciliationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableReconciliationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableReconciliationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconciliationTarget(val *ReconciliationTarget) *NullableReconciliationTarget {
	return &NullableReconciliationTarget{value: val, isSet: true}
}

func (v NullableReconciliationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconciliationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


