/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// DnsProjectZoneRecordsetPatch struct for DnsProjectZoneRecordsetPatch
type DnsProjectZoneRecordsetPatch struct {
	Ttl *float32 `json:"ttl,omitempty"`
}

// NewDnsProjectZoneRecordsetPatch instantiates a new DnsProjectZoneRecordsetPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsProjectZoneRecordsetPatch() *DnsProjectZoneRecordsetPatch {
	this := DnsProjectZoneRecordsetPatch{}
	var ttl float32 = 3600
	this.Ttl = &ttl
	return &this
}

// NewDnsProjectZoneRecordsetPatchWithDefaults instantiates a new DnsProjectZoneRecordsetPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsProjectZoneRecordsetPatchWithDefaults() *DnsProjectZoneRecordsetPatch {
	this := DnsProjectZoneRecordsetPatch{}
	var ttl float32 = 3600
	this.Ttl = &ttl
	return &this
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DnsProjectZoneRecordsetPatch) GetTtl() float32 {
	if o == nil || o.Ttl == nil {
		var ret float32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProjectZoneRecordsetPatch) GetTtlOk() (*float32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DnsProjectZoneRecordsetPatch) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given float32 and assigns it to the Ttl field.
func (o *DnsProjectZoneRecordsetPatch) SetTtl(v float32) {
	o.Ttl = &v
}

func (o DnsProjectZoneRecordsetPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableDnsProjectZoneRecordsetPatch struct {
	value *DnsProjectZoneRecordsetPatch
	isSet bool
}

func (v NullableDnsProjectZoneRecordsetPatch) Get() *DnsProjectZoneRecordsetPatch {
	return v.value
}

func (v *NullableDnsProjectZoneRecordsetPatch) Set(val *DnsProjectZoneRecordsetPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsProjectZoneRecordsetPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsProjectZoneRecordsetPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsProjectZoneRecordsetPatch(val *DnsProjectZoneRecordsetPatch) *NullableDnsProjectZoneRecordsetPatch {
	return &NullableDnsProjectZoneRecordsetPatch{value: val, isSet: true}
}

func (v NullableDnsProjectZoneRecordsetPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsProjectZoneRecordsetPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


