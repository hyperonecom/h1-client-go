/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Attempt struct for Attempt
type Attempt struct {
	Id *string `json:"id,omitempty"`
	Status *float32 `json:"status,omitempty"`
	Error *bool `json:"error,omitempty"`
	Stdout *map[string]string `json:"stdout,omitempty"`
	Stderr *map[string]string `json:"stderr,omitempty"`
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	Agent *string `json:"agent,omitempty"`
}

// NewAttempt instantiates a new Attempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttempt() *Attempt {
	this := Attempt{}
	var error_ bool = false
	this.Error = &error_
	return &this
}

// NewAttemptWithDefaults instantiates a new Attempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptWithDefaults() *Attempt {
	this := Attempt{}
	var error_ bool = false
	this.Error = &error_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Attempt) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Attempt) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Attempt) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Attempt) GetStatus() float32 {
	if o == nil || o.Status == nil {
		var ret float32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetStatusOk() (*float32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Attempt) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given float32 and assigns it to the Status field.
func (o *Attempt) SetStatus(v float32) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Attempt) GetError() bool {
	if o == nil || o.Error == nil {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetErrorOk() (*bool, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Attempt) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *Attempt) SetError(v bool) {
	o.Error = &v
}

// GetStdout returns the Stdout field value if set, zero value otherwise.
func (o *Attempt) GetStdout() map[string]string {
	if o == nil || o.Stdout == nil {
		var ret map[string]string
		return ret
	}
	return *o.Stdout
}

// GetStdoutOk returns a tuple with the Stdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetStdoutOk() (*map[string]string, bool) {
	if o == nil || o.Stdout == nil {
		return nil, false
	}
	return o.Stdout, true
}

// HasStdout returns a boolean if a field has been set.
func (o *Attempt) HasStdout() bool {
	if o != nil && o.Stdout != nil {
		return true
	}

	return false
}

// SetStdout gets a reference to the given map[string]string and assigns it to the Stdout field.
func (o *Attempt) SetStdout(v map[string]string) {
	o.Stdout = &v
}

// GetStderr returns the Stderr field value if set, zero value otherwise.
func (o *Attempt) GetStderr() map[string]string {
	if o == nil || o.Stderr == nil {
		var ret map[string]string
		return ret
	}
	return *o.Stderr
}

// GetStderrOk returns a tuple with the Stderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetStderrOk() (*map[string]string, bool) {
	if o == nil || o.Stderr == nil {
		return nil, false
	}
	return o.Stderr, true
}

// HasStderr returns a boolean if a field has been set.
func (o *Attempt) HasStderr() bool {
	if o != nil && o.Stderr != nil {
		return true
	}

	return false
}

// SetStderr gets a reference to the given map[string]string and assigns it to the Stderr field.
func (o *Attempt) SetStderr(v map[string]string) {
	o.Stderr = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *Attempt) GetCreatedOn() time.Time {
	if o == nil || o.CreatedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || o.CreatedOn == nil {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *Attempt) HasCreatedOn() bool {
	if o != nil && o.CreatedOn != nil {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *Attempt) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *Attempt) GetAgent() string {
	if o == nil || o.Agent == nil {
		var ret string
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attempt) GetAgentOk() (*string, bool) {
	if o == nil || o.Agent == nil {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *Attempt) HasAgent() bool {
	if o != nil && o.Agent != nil {
		return true
	}

	return false
}

// SetAgent gets a reference to the given string and assigns it to the Agent field.
func (o *Attempt) SetAgent(v string) {
	o.Agent = &v
}

func (o Attempt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Stdout != nil {
		toSerialize["stdout"] = o.Stdout
	}
	if o.Stderr != nil {
		toSerialize["stderr"] = o.Stderr
	}
	if o.CreatedOn != nil {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if o.Agent != nil {
		toSerialize["agent"] = o.Agent
	}
	return json.Marshal(toSerialize)
}

type NullableAttempt struct {
	value *Attempt
	isSet bool
}

func (v NullableAttempt) Get() *Attempt {
	return v.value
}

func (v *NullableAttempt) Set(val *Attempt) {
	v.value = val
	v.isSet = true
}

func (v NullableAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullableAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttempt(val *Attempt) *NullableAttempt {
	return &NullableAttempt{value: val, isSet: true}
}

func (v NullableAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


