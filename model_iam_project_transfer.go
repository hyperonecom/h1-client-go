/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IamProjectTransfer struct for IamProjectTransfer
type IamProjectTransfer struct {
	Organisation string `json:"organisation"`
}

// NewIamProjectTransfer instantiates a new IamProjectTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamProjectTransfer(organisation string) *IamProjectTransfer {
	this := IamProjectTransfer{}
	this.Organisation = organisation
	return &this
}

// NewIamProjectTransferWithDefaults instantiates a new IamProjectTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamProjectTransferWithDefaults() *IamProjectTransfer {
	this := IamProjectTransfer{}
	return &this
}

// GetOrganisation returns the Organisation field value
func (o *IamProjectTransfer) GetOrganisation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organisation
}

// GetOrganisationOk returns a tuple with the Organisation field value
// and a boolean to check if the value has been set.
func (o *IamProjectTransfer) GetOrganisationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Organisation, true
}

// SetOrganisation sets field value
func (o *IamProjectTransfer) SetOrganisation(v string) {
	o.Organisation = v
}

func (o IamProjectTransfer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["organisation"] = o.Organisation
	}
	return json.Marshal(toSerialize)
}

type NullableIamProjectTransfer struct {
	value *IamProjectTransfer
	isSet bool
}

func (v NullableIamProjectTransfer) Get() *IamProjectTransfer {
	return v.value
}

func (v *NullableIamProjectTransfer) Set(val *IamProjectTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableIamProjectTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableIamProjectTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamProjectTransfer(val *IamProjectTransfer) *NullableIamProjectTransfer {
	return &NullableIamProjectTransfer{value: val, isSet: true}
}

func (v NullableIamProjectTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamProjectTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


