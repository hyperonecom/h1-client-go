/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// StorageProjectDiskResize struct for StorageProjectDiskResize
type StorageProjectDiskResize struct {
	Size float32 `json:"size"`
}

// NewStorageProjectDiskResize instantiates a new StorageProjectDiskResize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageProjectDiskResize(size float32) *StorageProjectDiskResize {
	this := StorageProjectDiskResize{}
	this.Size = size
	return &this
}

// NewStorageProjectDiskResizeWithDefaults instantiates a new StorageProjectDiskResize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageProjectDiskResizeWithDefaults() *StorageProjectDiskResize {
	this := StorageProjectDiskResize{}
	return &this
}

// GetSize returns the Size field value
func (o *StorageProjectDiskResize) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *StorageProjectDiskResize) GetSizeOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *StorageProjectDiskResize) SetSize(v float32) {
	o.Size = v
}

func (o StorageProjectDiskResize) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableStorageProjectDiskResize struct {
	value *StorageProjectDiskResize
	isSet bool
}

func (v NullableStorageProjectDiskResize) Get() *StorageProjectDiskResize {
	return v.value
}

func (v *NullableStorageProjectDiskResize) Set(val *StorageProjectDiskResize) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageProjectDiskResize) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageProjectDiskResize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageProjectDiskResize(val *StorageProjectDiskResize) *NullableStorageProjectDiskResize {
	return &NullableStorageProjectDiskResize{value: val, isSet: true}
}

func (v NullableStorageProjectDiskResize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageProjectDiskResize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


