/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties struct for WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties
type WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties struct {
	Used *int32 `json:"used,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties instantiates a new WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties() *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties {
	this := WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties{}
	return &this
}

// NewWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotPropertiesWithDefaults instantiates a new WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotPropertiesWithDefaults() *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties {
	this := WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties{}
	return &this
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) GetUsed() int32 {
	if o == nil || o.Used == nil {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) GetUsedOk() (*int32, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) SetUsed(v int32) {
	o.Used = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) SetState(v string) {
	o.State = &v
}

func (o WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties struct {
	value *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties
	isSet bool
}

func (v NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) Get() *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties {
	return v.value
}

func (v *NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) Set(val *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties(val *WebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) *NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties {
	return &NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties{value: val, isSet: true}
}

func (v NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteLocationIdProjectProjectIdInstanceInstanceIdSnapshotProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


