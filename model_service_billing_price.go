/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServiceBillingPrice struct for ServiceBillingPrice
type ServiceBillingPrice struct {
	PLN *float32 `json:"PLN,omitempty"`
	EUR *float32 `json:"EUR,omitempty"`
	USD *float32 `json:"USD,omitempty"`
	GBP *float32 `json:"GBP,omitempty"`
}

// NewServiceBillingPrice instantiates a new ServiceBillingPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceBillingPrice() *ServiceBillingPrice {
	this := ServiceBillingPrice{}
	return &this
}

// NewServiceBillingPriceWithDefaults instantiates a new ServiceBillingPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceBillingPriceWithDefaults() *ServiceBillingPrice {
	this := ServiceBillingPrice{}
	return &this
}

// GetPLN returns the PLN field value if set, zero value otherwise.
func (o *ServiceBillingPrice) GetPLN() float32 {
	if o == nil || o.PLN == nil {
		var ret float32
		return ret
	}
	return *o.PLN
}

// GetPLNOk returns a tuple with the PLN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBillingPrice) GetPLNOk() (*float32, bool) {
	if o == nil || o.PLN == nil {
		return nil, false
	}
	return o.PLN, true
}

// HasPLN returns a boolean if a field has been set.
func (o *ServiceBillingPrice) HasPLN() bool {
	if o != nil && o.PLN != nil {
		return true
	}

	return false
}

// SetPLN gets a reference to the given float32 and assigns it to the PLN field.
func (o *ServiceBillingPrice) SetPLN(v float32) {
	o.PLN = &v
}

// GetEUR returns the EUR field value if set, zero value otherwise.
func (o *ServiceBillingPrice) GetEUR() float32 {
	if o == nil || o.EUR == nil {
		var ret float32
		return ret
	}
	return *o.EUR
}

// GetEUROk returns a tuple with the EUR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBillingPrice) GetEUROk() (*float32, bool) {
	if o == nil || o.EUR == nil {
		return nil, false
	}
	return o.EUR, true
}

// HasEUR returns a boolean if a field has been set.
func (o *ServiceBillingPrice) HasEUR() bool {
	if o != nil && o.EUR != nil {
		return true
	}

	return false
}

// SetEUR gets a reference to the given float32 and assigns it to the EUR field.
func (o *ServiceBillingPrice) SetEUR(v float32) {
	o.EUR = &v
}

// GetUSD returns the USD field value if set, zero value otherwise.
func (o *ServiceBillingPrice) GetUSD() float32 {
	if o == nil || o.USD == nil {
		var ret float32
		return ret
	}
	return *o.USD
}

// GetUSDOk returns a tuple with the USD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBillingPrice) GetUSDOk() (*float32, bool) {
	if o == nil || o.USD == nil {
		return nil, false
	}
	return o.USD, true
}

// HasUSD returns a boolean if a field has been set.
func (o *ServiceBillingPrice) HasUSD() bool {
	if o != nil && o.USD != nil {
		return true
	}

	return false
}

// SetUSD gets a reference to the given float32 and assigns it to the USD field.
func (o *ServiceBillingPrice) SetUSD(v float32) {
	o.USD = &v
}

// GetGBP returns the GBP field value if set, zero value otherwise.
func (o *ServiceBillingPrice) GetGBP() float32 {
	if o == nil || o.GBP == nil {
		var ret float32
		return ret
	}
	return *o.GBP
}

// GetGBPOk returns a tuple with the GBP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBillingPrice) GetGBPOk() (*float32, bool) {
	if o == nil || o.GBP == nil {
		return nil, false
	}
	return o.GBP, true
}

// HasGBP returns a boolean if a field has been set.
func (o *ServiceBillingPrice) HasGBP() bool {
	if o != nil && o.GBP != nil {
		return true
	}

	return false
}

// SetGBP gets a reference to the given float32 and assigns it to the GBP field.
func (o *ServiceBillingPrice) SetGBP(v float32) {
	o.GBP = &v
}

func (o ServiceBillingPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PLN != nil {
		toSerialize["PLN"] = o.PLN
	}
	if o.EUR != nil {
		toSerialize["EUR"] = o.EUR
	}
	if o.USD != nil {
		toSerialize["USD"] = o.USD
	}
	if o.GBP != nil {
		toSerialize["GBP"] = o.GBP
	}
	return json.Marshal(toSerialize)
}

type NullableServiceBillingPrice struct {
	value *ServiceBillingPrice
	isSet bool
}

func (v NullableServiceBillingPrice) Get() *ServiceBillingPrice {
	return v.value
}

func (v *NullableServiceBillingPrice) Set(val *ServiceBillingPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceBillingPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceBillingPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceBillingPrice(val *ServiceBillingPrice) *NullableServiceBillingPrice {
	return &NullableServiceBillingPrice{value: val, isSet: true}
}

func (v NullableServiceBillingPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceBillingPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


