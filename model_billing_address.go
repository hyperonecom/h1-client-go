/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BillingAddress struct for BillingAddress
type BillingAddress struct {
	Country *string `json:"country,omitempty"`
	City string `json:"city"`
	Street string `json:"street"`
	Zipcode string `json:"zipcode"`
}

// NewBillingAddress instantiates a new BillingAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingAddress(city string, street string, zipcode string) *BillingAddress {
	this := BillingAddress{}
	var country string = "PL"
	this.Country = &country
	this.City = city
	this.Street = street
	this.Zipcode = zipcode
	return &this
}

// NewBillingAddressWithDefaults instantiates a new BillingAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingAddressWithDefaults() *BillingAddress {
	this := BillingAddress{}
	var country string = "PL"
	this.Country = &country
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *BillingAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *BillingAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *BillingAddress) SetCountry(v string) {
	o.Country = &v
}

// GetCity returns the City field value
func (o *BillingAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *BillingAddress) SetCity(v string) {
	o.City = v
}

// GetStreet returns the Street field value
func (o *BillingAddress) GetStreet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetStreetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Street, true
}

// SetStreet sets field value
func (o *BillingAddress) SetStreet(v string) {
	o.Street = v
}

// GetZipcode returns the Zipcode field value
func (o *BillingAddress) GetZipcode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetZipcodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Zipcode, true
}

// SetZipcode sets field value
func (o *BillingAddress) SetZipcode(v string) {
	o.Zipcode = v
}

func (o BillingAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["street"] = o.Street
	}
	if true {
		toSerialize["zipcode"] = o.Zipcode
	}
	return json.Marshal(toSerialize)
}

type NullableBillingAddress struct {
	value *BillingAddress
	isSet bool
}

func (v NullableBillingAddress) Get() *BillingAddress {
	return v.value
}

func (v *NullableBillingAddress) Set(val *BillingAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingAddress(val *BillingAddress) *NullableBillingAddress {
	return &NullableBillingAddress{value: val, isSet: true}
}

func (v NullableBillingAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


