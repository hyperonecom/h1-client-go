/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// Connect struct for Connect
type Connect struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// NewConnect instantiates a new Connect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnect(id string, name string, type_ string) *Connect {
	this := Connect{}
	this.Id = id
	this.Name = name
	this.Type = type_
	return &this
}

// NewConnectWithDefaults instantiates a new Connect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectWithDefaults() *Connect {
	this := Connect{}
	return &this
}

// GetId returns the Id field value
func (o *Connect) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Connect) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Connect) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Connect) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Connect) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Connect) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Connect) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Connect) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Connect) SetType(v string) {
	o.Type = v
}

func (o Connect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConnect struct {
	value *Connect
	isSet bool
}

func (v NullableConnect) Get() *Connect {
	return v.value
}

func (v *NullableConnect) Set(val *Connect) {
	v.value = val
	v.isSet = true
}

func (v NullableConnect) IsSet() bool {
	return v.isSet
}

func (v *NullableConnect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnect(val *Connect) *NullableConnect {
	return &NullableConnect{value: val, isSet: true}
}

func (v NullableConnect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


