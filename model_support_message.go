/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SupportMessage struct for SupportMessage
type SupportMessage struct {
	Data *MessageData `json:"data,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Id *string `json:"id,omitempty"`
	Origin *string `json:"origin,omitempty"`
	Type string `json:"type"`
	User *string `json:"user,omitempty"`
}

// NewSupportMessage instantiates a new SupportMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportMessage(type_ string) *SupportMessage {
	this := SupportMessage{}
	this.Type = type_
	return &this
}

// NewSupportMessageWithDefaults instantiates a new SupportMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportMessageWithDefaults() *SupportMessage {
	this := SupportMessage{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SupportMessage) GetData() MessageData {
	if o == nil || o.Data == nil {
		var ret MessageData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMessage) GetDataOk() (*MessageData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SupportMessage) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given MessageData and assigns it to the Data field.
func (o *SupportMessage) SetData(v MessageData) {
	o.Data = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SupportMessage) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMessage) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SupportMessage) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *SupportMessage) SetDate(v time.Time) {
	o.Date = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SupportMessage) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMessage) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SupportMessage) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SupportMessage) SetId(v string) {
	o.Id = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *SupportMessage) GetOrigin() string {
	if o == nil || o.Origin == nil {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMessage) GetOriginOk() (*string, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *SupportMessage) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *SupportMessage) SetOrigin(v string) {
	o.Origin = &v
}

// GetType returns the Type field value
func (o *SupportMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupportMessage) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupportMessage) SetType(v string) {
	o.Type = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SupportMessage) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMessage) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SupportMessage) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *SupportMessage) SetUser(v string) {
	o.User = &v
}

func (o SupportMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableSupportMessage struct {
	value *SupportMessage
	isSet bool
}

func (v NullableSupportMessage) Get() *SupportMessage {
	return v.value
}

func (v *NullableSupportMessage) Set(val *SupportMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportMessage(val *SupportMessage) *NullableSupportMessage {
	return &NullableSupportMessage{value: val, isSet: true}
}

func (v NullableSupportMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


