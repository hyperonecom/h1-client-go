/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// InvoiceSellerAddress struct for InvoiceSellerAddress
type InvoiceSellerAddress struct {
	Street string `json:"street"`
	Zipcode string `json:"zipcode"`
	City string `json:"city"`
	Country string `json:"country"`
}

// NewInvoiceSellerAddress instantiates a new InvoiceSellerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceSellerAddress(street string, zipcode string, city string, country string, ) *InvoiceSellerAddress {
	this := InvoiceSellerAddress{}
	this.Street = street
	this.Zipcode = zipcode
	this.City = city
	this.Country = country
	return &this
}

// NewInvoiceSellerAddressWithDefaults instantiates a new InvoiceSellerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceSellerAddressWithDefaults() *InvoiceSellerAddress {
	this := InvoiceSellerAddress{}
	return &this
}

// GetStreet returns the Street field value
func (o *InvoiceSellerAddress) GetStreet() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *InvoiceSellerAddress) GetStreetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Street, true
}

// SetStreet sets field value
func (o *InvoiceSellerAddress) SetStreet(v string) {
	o.Street = v
}

// GetZipcode returns the Zipcode field value
func (o *InvoiceSellerAddress) GetZipcode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value
// and a boolean to check if the value has been set.
func (o *InvoiceSellerAddress) GetZipcodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Zipcode, true
}

// SetZipcode sets field value
func (o *InvoiceSellerAddress) SetZipcode(v string) {
	o.Zipcode = v
}

// GetCity returns the City field value
func (o *InvoiceSellerAddress) GetCity() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *InvoiceSellerAddress) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *InvoiceSellerAddress) SetCity(v string) {
	o.City = v
}

// GetCountry returns the Country field value
func (o *InvoiceSellerAddress) GetCountry() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *InvoiceSellerAddress) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *InvoiceSellerAddress) SetCountry(v string) {
	o.Country = v
}

func (o InvoiceSellerAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["street"] = o.Street
	}
	if true {
		toSerialize["zipcode"] = o.Zipcode
	}
	if true {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableInvoiceSellerAddress struct {
	value *InvoiceSellerAddress
	isSet bool
}

func (v NullableInvoiceSellerAddress) Get() *InvoiceSellerAddress {
	return v.value
}

func (v *NullableInvoiceSellerAddress) Set(val *InvoiceSellerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceSellerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceSellerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceSellerAddress(val *InvoiceSellerAddress) *NullableInvoiceSellerAddress {
	return &NullableInvoiceSellerAddress{value: val, isSet: true}
}

func (v NullableInvoiceSellerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceSellerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


