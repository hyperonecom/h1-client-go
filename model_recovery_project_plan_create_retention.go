/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// RecoveryProjectPlanCreateRetention struct for RecoveryProjectPlanCreateRetention
type RecoveryProjectPlanCreateRetention struct {
	Interval string `json:"interval"`
	Count float32 `json:"count"`
}

// NewRecoveryProjectPlanCreateRetention instantiates a new RecoveryProjectPlanCreateRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoveryProjectPlanCreateRetention(interval string, count float32) *RecoveryProjectPlanCreateRetention {
	this := RecoveryProjectPlanCreateRetention{}
	this.Interval = interval
	this.Count = count
	return &this
}

// NewRecoveryProjectPlanCreateRetentionWithDefaults instantiates a new RecoveryProjectPlanCreateRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoveryProjectPlanCreateRetentionWithDefaults() *RecoveryProjectPlanCreateRetention {
	this := RecoveryProjectPlanCreateRetention{}
	return &this
}

// GetInterval returns the Interval field value
func (o *RecoveryProjectPlanCreateRetention) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *RecoveryProjectPlanCreateRetention) GetIntervalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *RecoveryProjectPlanCreateRetention) SetInterval(v string) {
	o.Interval = v
}

// GetCount returns the Count field value
func (o *RecoveryProjectPlanCreateRetention) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *RecoveryProjectPlanCreateRetention) GetCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *RecoveryProjectPlanCreateRetention) SetCount(v float32) {
	o.Count = v
}

func (o RecoveryProjectPlanCreateRetention) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableRecoveryProjectPlanCreateRetention struct {
	value *RecoveryProjectPlanCreateRetention
	isSet bool
}

func (v NullableRecoveryProjectPlanCreateRetention) Get() *RecoveryProjectPlanCreateRetention {
	return v.value
}

func (v *NullableRecoveryProjectPlanCreateRetention) Set(val *RecoveryProjectPlanCreateRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryProjectPlanCreateRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryProjectPlanCreateRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryProjectPlanCreateRetention(val *RecoveryProjectPlanCreateRetention) *NullableRecoveryProjectPlanCreateRetention {
	return &NullableRecoveryProjectPlanCreateRetention{value: val, isSet: true}
}

func (v NullableRecoveryProjectPlanCreateRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryProjectPlanCreateRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


