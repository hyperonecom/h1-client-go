/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReconciliationTargetPlan struct for ReconciliationTargetPlan
type ReconciliationTargetPlan struct {
	Id *string `json:"id,omitempty"`
	Usage *float32 `json:"usage,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
}

// NewReconciliationTargetPlan instantiates a new ReconciliationTargetPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconciliationTargetPlan() *ReconciliationTargetPlan {
	this := ReconciliationTargetPlan{}
	return &this
}

// NewReconciliationTargetPlanWithDefaults instantiates a new ReconciliationTargetPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconciliationTargetPlanWithDefaults() *ReconciliationTargetPlan {
	this := ReconciliationTargetPlan{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReconciliationTargetPlan) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTargetPlan) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReconciliationTargetPlan) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReconciliationTargetPlan) SetId(v string) {
	o.Id = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ReconciliationTargetPlan) GetUsage() float32 {
	if o == nil || o.Usage == nil {
		var ret float32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTargetPlan) GetUsageOk() (*float32, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ReconciliationTargetPlan) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given float32 and assigns it to the Usage field.
func (o *ReconciliationTargetPlan) SetUsage(v float32) {
	o.Usage = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ReconciliationTargetPlan) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTargetPlan) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ReconciliationTargetPlan) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *ReconciliationTargetPlan) SetCost(v float32) {
	o.Cost = &v
}

func (o ReconciliationTargetPlan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	return json.Marshal(toSerialize)
}

type NullableReconciliationTargetPlan struct {
	value *ReconciliationTargetPlan
	isSet bool
}

func (v NullableReconciliationTargetPlan) Get() *ReconciliationTargetPlan {
	return v.value
}

func (v *NullableReconciliationTargetPlan) Set(val *ReconciliationTargetPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableReconciliationTargetPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableReconciliationTargetPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconciliationTargetPlan(val *ReconciliationTargetPlan) *NullableReconciliationTargetPlan {
	return &NullableReconciliationTargetPlan{value: val, isSet: true}
}

func (v NullableReconciliationTargetPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconciliationTargetPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


