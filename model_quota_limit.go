/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QuotaLimit struct for QuotaLimit
type QuotaLimit struct {
	Effective *float32 `json:"effective,omitempty"`
	Platform *float32 `json:"platform,omitempty"`
	User *float32 `json:"user,omitempty"`
}

// NewQuotaLimit instantiates a new QuotaLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaLimit() *QuotaLimit {
	this := QuotaLimit{}
	return &this
}

// NewQuotaLimitWithDefaults instantiates a new QuotaLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaLimitWithDefaults() *QuotaLimit {
	this := QuotaLimit{}
	return &this
}

// GetEffective returns the Effective field value if set, zero value otherwise.
func (o *QuotaLimit) GetEffective() float32 {
	if o == nil || o.Effective == nil {
		var ret float32
		return ret
	}
	return *o.Effective
}

// GetEffectiveOk returns a tuple with the Effective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaLimit) GetEffectiveOk() (*float32, bool) {
	if o == nil || o.Effective == nil {
		return nil, false
	}
	return o.Effective, true
}

// HasEffective returns a boolean if a field has been set.
func (o *QuotaLimit) HasEffective() bool {
	if o != nil && o.Effective != nil {
		return true
	}

	return false
}

// SetEffective gets a reference to the given float32 and assigns it to the Effective field.
func (o *QuotaLimit) SetEffective(v float32) {
	o.Effective = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *QuotaLimit) GetPlatform() float32 {
	if o == nil || o.Platform == nil {
		var ret float32
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaLimit) GetPlatformOk() (*float32, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *QuotaLimit) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given float32 and assigns it to the Platform field.
func (o *QuotaLimit) SetPlatform(v float32) {
	o.Platform = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *QuotaLimit) GetUser() float32 {
	if o == nil || o.User == nil {
		var ret float32
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaLimit) GetUserOk() (*float32, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *QuotaLimit) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given float32 and assigns it to the User field.
func (o *QuotaLimit) SetUser(v float32) {
	o.User = &v
}

func (o QuotaLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Effective != nil {
		toSerialize["effective"] = o.Effective
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableQuotaLimit struct {
	value *QuotaLimit
	isSet bool
}

func (v NullableQuotaLimit) Get() *QuotaLimit {
	return v.value
}

func (v *NullableQuotaLimit) Set(val *QuotaLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaLimit(val *QuotaLimit) *NullableQuotaLimit {
	return &NullableQuotaLimit{value: val, isSet: true}
}

func (v NullableQuotaLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


