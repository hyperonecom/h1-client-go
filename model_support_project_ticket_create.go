/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// SupportProjectTicketCreate struct for SupportProjectTicketCreate
type SupportProjectTicketCreate struct {
	Type string `json:"type"`
	Subject string `json:"subject"`
	Message string `json:"message"`
}

// NewSupportProjectTicketCreate instantiates a new SupportProjectTicketCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportProjectTicketCreate(type_ string, subject string, message string, ) *SupportProjectTicketCreate {
	this := SupportProjectTicketCreate{}
	this.Type = type_
	this.Subject = subject
	this.Message = message
	return &this
}

// NewSupportProjectTicketCreateWithDefaults instantiates a new SupportProjectTicketCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportProjectTicketCreateWithDefaults() *SupportProjectTicketCreate {
	this := SupportProjectTicketCreate{}
	return &this
}

// GetType returns the Type field value
func (o *SupportProjectTicketCreate) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SupportProjectTicketCreate) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SupportProjectTicketCreate) SetType(v string) {
	o.Type = v
}

// GetSubject returns the Subject field value
func (o *SupportProjectTicketCreate) GetSubject() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SupportProjectTicketCreate) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *SupportProjectTicketCreate) SetSubject(v string) {
	o.Subject = v
}

// GetMessage returns the Message field value
func (o *SupportProjectTicketCreate) GetMessage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SupportProjectTicketCreate) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SupportProjectTicketCreate) SetMessage(v string) {
	o.Message = v
}

func (o SupportProjectTicketCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableSupportProjectTicketCreate struct {
	value *SupportProjectTicketCreate
	isSet bool
}

func (v NullableSupportProjectTicketCreate) Get() *SupportProjectTicketCreate {
	return v.value
}

func (v *NullableSupportProjectTicketCreate) Set(val *SupportProjectTicketCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportProjectTicketCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportProjectTicketCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportProjectTicketCreate(val *SupportProjectTicketCreate) *NullableSupportProjectTicketCreate {
	return &NullableSupportProjectTicketCreate{value: val, isSet: true}
}

func (v NullableSupportProjectTicketCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportProjectTicketCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


