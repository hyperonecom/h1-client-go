/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvoiceBuyerAddress struct for InvoiceBuyerAddress
type InvoiceBuyerAddress struct {
	City string `json:"city"`
	Country string `json:"country"`
	Street string `json:"street"`
	Zipcode *string `json:"zipcode,omitempty"`
}

// NewInvoiceBuyerAddress instantiates a new InvoiceBuyerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceBuyerAddress(city string, country string, street string) *InvoiceBuyerAddress {
	this := InvoiceBuyerAddress{}
	this.City = city
	this.Country = country
	this.Street = street
	return &this
}

// NewInvoiceBuyerAddressWithDefaults instantiates a new InvoiceBuyerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceBuyerAddressWithDefaults() *InvoiceBuyerAddress {
	this := InvoiceBuyerAddress{}
	return &this
}

// GetCity returns the City field value
func (o *InvoiceBuyerAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *InvoiceBuyerAddress) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *InvoiceBuyerAddress) SetCity(v string) {
	o.City = v
}

// GetCountry returns the Country field value
func (o *InvoiceBuyerAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *InvoiceBuyerAddress) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *InvoiceBuyerAddress) SetCountry(v string) {
	o.Country = v
}

// GetStreet returns the Street field value
func (o *InvoiceBuyerAddress) GetStreet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *InvoiceBuyerAddress) GetStreetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Street, true
}

// SetStreet sets field value
func (o *InvoiceBuyerAddress) SetStreet(v string) {
	o.Street = v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *InvoiceBuyerAddress) GetZipcode() string {
	if o == nil || o.Zipcode == nil {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceBuyerAddress) GetZipcodeOk() (*string, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *InvoiceBuyerAddress) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *InvoiceBuyerAddress) SetZipcode(v string) {
	o.Zipcode = &v
}

func (o InvoiceBuyerAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["street"] = o.Street
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	return json.Marshal(toSerialize)
}

type NullableInvoiceBuyerAddress struct {
	value *InvoiceBuyerAddress
	isSet bool
}

func (v NullableInvoiceBuyerAddress) Get() *InvoiceBuyerAddress {
	return v.value
}

func (v *NullableInvoiceBuyerAddress) Set(val *InvoiceBuyerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceBuyerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceBuyerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceBuyerAddress(val *InvoiceBuyerAddress) *NullableInvoiceBuyerAddress {
	return &NullableInvoiceBuyerAddress{value: val, isSet: true}
}

func (v NullableInvoiceBuyerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceBuyerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


