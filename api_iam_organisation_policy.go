/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IamOrganisationPolicyApiService IamOrganisationPolicyApi service
type IamOrganisationPolicyApiService service

type ApiIamOrganisationPolicyActorCreateRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	iamActor *IamActor
}

func (r ApiIamOrganisationPolicyActorCreateRequest) IamActor(iamActor IamActor) ApiIamOrganisationPolicyActorCreateRequest {
	r.iamActor = &iamActor
	return r
}

func (r ApiIamOrganisationPolicyActorCreateRequest) Execute() (IamActor, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyActorCreateExecute(r)
}

/*
 * IamOrganisationPolicyActorCreate Create iam/policy.actor
 * Create iam/policy.actor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyActorCreateRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorCreate(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyActorCreateRequest {
	return ApiIamOrganisationPolicyActorCreateRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return IamActor
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorCreateExecute(r ApiIamOrganisationPolicyActorCreateRequest) (IamActor, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamActor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyActorCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/actor"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.iamActor == nil {
		return localVarReturnValue, nil, reportError("iamActor is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.iamActor
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyActorDeleteRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	actorId string
}


func (r ApiIamOrganisationPolicyActorDeleteRequest) Execute() (IamActor, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyActorDeleteExecute(r)
}

/*
 * IamOrganisationPolicyActorDelete Delete iam/policy.actor
 * Delete iam/policy.actor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @param actorId actorId
 * @return ApiIamOrganisationPolicyActorDeleteRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorDelete(ctx _context.Context, organisationId string, policyId string, actorId string) ApiIamOrganisationPolicyActorDeleteRequest {
	return ApiIamOrganisationPolicyActorDeleteRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
		actorId: actorId,
	}
}

/*
 * Execute executes the request
 * @return IamActor
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorDeleteExecute(r ApiIamOrganisationPolicyActorDeleteRequest) (IamActor, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamActor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyActorDelete")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/actor/{actorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actorId"+"}", _neturl.PathEscape(parameterToString(r.actorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyActorGetRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	actorId string
}


func (r ApiIamOrganisationPolicyActorGetRequest) Execute() (IamActor, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyActorGetExecute(r)
}

/*
 * IamOrganisationPolicyActorGet Get iam/policy.actor
 * Get iam/policy.actor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @param actorId actorId
 * @return ApiIamOrganisationPolicyActorGetRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorGet(ctx _context.Context, organisationId string, policyId string, actorId string) ApiIamOrganisationPolicyActorGetRequest {
	return ApiIamOrganisationPolicyActorGetRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
		actorId: actorId,
	}
}

/*
 * Execute executes the request
 * @return IamActor
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorGetExecute(r ApiIamOrganisationPolicyActorGetRequest) (IamActor, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IamActor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyActorGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/actor/{actorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actorId"+"}", _neturl.PathEscape(parameterToString(r.actorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyActorListRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
}


func (r ApiIamOrganisationPolicyActorListRequest) Execute() ([]IamActor, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyActorListExecute(r)
}

/*
 * IamOrganisationPolicyActorList List iam/policy.actor
 * List iam/policy.actor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyActorListRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorList(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyActorListRequest {
	return ApiIamOrganisationPolicyActorListRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return []IamActor
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyActorListExecute(r ApiIamOrganisationPolicyActorListRequest) ([]IamActor, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []IamActor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyActorList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/actor"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyCreateRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	iamProjectPolicyCreate *IamProjectPolicyCreate
	xIdempotencyKey *string
	xDryRun *string
}

func (r ApiIamOrganisationPolicyCreateRequest) IamProjectPolicyCreate(iamProjectPolicyCreate IamProjectPolicyCreate) ApiIamOrganisationPolicyCreateRequest {
	r.iamProjectPolicyCreate = &iamProjectPolicyCreate
	return r
}
func (r ApiIamOrganisationPolicyCreateRequest) XIdempotencyKey(xIdempotencyKey string) ApiIamOrganisationPolicyCreateRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiIamOrganisationPolicyCreateRequest) XDryRun(xDryRun string) ApiIamOrganisationPolicyCreateRequest {
	r.xDryRun = &xDryRun
	return r
}

func (r ApiIamOrganisationPolicyCreateRequest) Execute() (Policy, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyCreateExecute(r)
}

/*
 * IamOrganisationPolicyCreate Create iam/policy
 * Create policy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @return ApiIamOrganisationPolicyCreateRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyCreate(ctx _context.Context, organisationId string) ApiIamOrganisationPolicyCreateRequest {
	return ApiIamOrganisationPolicyCreateRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
	}
}

/*
 * Execute executes the request
 * @return Policy
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyCreateExecute(r ApiIamOrganisationPolicyCreateRequest) (Policy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Policy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.iamProjectPolicyCreate == nil {
		return localVarReturnValue, nil, reportError("iamProjectPolicyCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xDryRun != nil {
		localVarHeaderParams["x-dry-run"] = parameterToString(*r.xDryRun, "")
	}
	// body params
	localVarPostBody = r.iamProjectPolicyCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyDeleteRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
}


func (r ApiIamOrganisationPolicyDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyDeleteExecute(r)
}

/*
 * IamOrganisationPolicyDelete Delete iam/policy
 * Delete policy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyDeleteRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyDelete(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyDeleteRequest {
	return ApiIamOrganisationPolicyDeleteRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyDeleteExecute(r ApiIamOrganisationPolicyDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyEventGetRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	eventId string
}


func (r ApiIamOrganisationPolicyEventGetRequest) Execute() (Event, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyEventGetExecute(r)
}

/*
 * IamOrganisationPolicyEventGet Get iam/policy.event
 * Get iam/policy.event
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @param eventId eventId
 * @return ApiIamOrganisationPolicyEventGetRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyEventGet(ctx _context.Context, organisationId string, policyId string, eventId string) ApiIamOrganisationPolicyEventGetRequest {
	return ApiIamOrganisationPolicyEventGetRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
		eventId: eventId,
	}
}

/*
 * Execute executes the request
 * @return Event
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyEventGetExecute(r ApiIamOrganisationPolicyEventGetRequest) (Event, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyEventGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/event/{eventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eventId"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyEventListRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	limit *float32
	skip *float32
}

func (r ApiIamOrganisationPolicyEventListRequest) Limit(limit float32) ApiIamOrganisationPolicyEventListRequest {
	r.limit = &limit
	return r
}
func (r ApiIamOrganisationPolicyEventListRequest) Skip(skip float32) ApiIamOrganisationPolicyEventListRequest {
	r.skip = &skip
	return r
}

func (r ApiIamOrganisationPolicyEventListRequest) Execute() ([]Event, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyEventListExecute(r)
}

/*
 * IamOrganisationPolicyEventList List iam/policy.event
 * List iam/policy.event
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyEventListRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyEventList(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyEventListRequest {
	return ApiIamOrganisationPolicyEventListRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return []Event
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyEventListExecute(r ApiIamOrganisationPolicyEventListRequest) ([]Event, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyEventList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/event"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("$limit", parameterToString(*r.limit, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyGetRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
}


func (r ApiIamOrganisationPolicyGetRequest) Execute() (Policy, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyGetExecute(r)
}

/*
 * IamOrganisationPolicyGet Get iam/policy
 * Returns a single policy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyGetRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyGet(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyGetRequest {
	return ApiIamOrganisationPolicyGetRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return Policy
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyGetExecute(r ApiIamOrganisationPolicyGetRequest) (Policy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Policy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyListRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	name *string
	resource *string
	tagValue *string
	tagKey *string
}

func (r ApiIamOrganisationPolicyListRequest) Name(name string) ApiIamOrganisationPolicyListRequest {
	r.name = &name
	return r
}
func (r ApiIamOrganisationPolicyListRequest) Resource(resource string) ApiIamOrganisationPolicyListRequest {
	r.resource = &resource
	return r
}
func (r ApiIamOrganisationPolicyListRequest) TagValue(tagValue string) ApiIamOrganisationPolicyListRequest {
	r.tagValue = &tagValue
	return r
}
func (r ApiIamOrganisationPolicyListRequest) TagKey(tagKey string) ApiIamOrganisationPolicyListRequest {
	r.tagKey = &tagKey
	return r
}

func (r ApiIamOrganisationPolicyListRequest) Execute() ([]Policy, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyListExecute(r)
}

/*
 * IamOrganisationPolicyList List iam/policy
 * List policy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @return ApiIamOrganisationPolicyListRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyList(ctx _context.Context, organisationId string) ApiIamOrganisationPolicyListRequest {
	return ApiIamOrganisationPolicyListRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
	}
}

/*
 * Execute executes the request
 * @return []Policy
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyListExecute(r ApiIamOrganisationPolicyListRequest) ([]Policy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Policy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.resource != nil {
		localVarQueryParams.Add("resource", parameterToString(*r.resource, ""))
	}
	if r.tagValue != nil {
		localVarQueryParams.Add("tag.value", parameterToString(*r.tagValue, ""))
	}
	if r.tagKey != nil {
		localVarQueryParams.Add("tag.key", parameterToString(*r.tagKey, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyServiceGetRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	serviceId string
}


func (r ApiIamOrganisationPolicyServiceGetRequest) Execute() (ResourceService, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyServiceGetExecute(r)
}

/*
 * IamOrganisationPolicyServiceGet Get iam/policy.service
 * Get iam/policy.service
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @param serviceId serviceId
 * @return ApiIamOrganisationPolicyServiceGetRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyServiceGet(ctx _context.Context, organisationId string, policyId string, serviceId string) ApiIamOrganisationPolicyServiceGetRequest {
	return ApiIamOrganisationPolicyServiceGetRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
		serviceId: serviceId,
	}
}

/*
 * Execute executes the request
 * @return ResourceService
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyServiceGetExecute(r ApiIamOrganisationPolicyServiceGetRequest) (ResourceService, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResourceService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyServiceGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/service/{serviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", _neturl.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyServiceListRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
}


func (r ApiIamOrganisationPolicyServiceListRequest) Execute() ([]ResourceService, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyServiceListExecute(r)
}

/*
 * IamOrganisationPolicyServiceList List iam/policy.service
 * List iam/policy.service
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyServiceListRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyServiceList(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyServiceListRequest {
	return ApiIamOrganisationPolicyServiceListRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return []ResourceService
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyServiceListExecute(r ApiIamOrganisationPolicyServiceListRequest) ([]ResourceService, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ResourceService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyServiceList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/service"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyTagCreateRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	tag *Tag
}

func (r ApiIamOrganisationPolicyTagCreateRequest) Tag(tag Tag) ApiIamOrganisationPolicyTagCreateRequest {
	r.tag = &tag
	return r
}

func (r ApiIamOrganisationPolicyTagCreateRequest) Execute() (Tag, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyTagCreateExecute(r)
}

/*
 * IamOrganisationPolicyTagCreate Create iam/policy.tag
 * Create iam/policy.tag
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyTagCreateRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagCreate(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyTagCreateRequest {
	return ApiIamOrganisationPolicyTagCreateRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return Tag
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagCreateExecute(r ApiIamOrganisationPolicyTagCreateRequest) (Tag, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyTagCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/tag"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.tag == nil {
		return localVarReturnValue, nil, reportError("tag is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tag
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyTagDeleteRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	tagId string
}


func (r ApiIamOrganisationPolicyTagDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyTagDeleteExecute(r)
}

/*
 * IamOrganisationPolicyTagDelete Delete iam/policy.tag
 * Delete iam/policy.tag
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @param tagId tagId
 * @return ApiIamOrganisationPolicyTagDeleteRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagDelete(ctx _context.Context, organisationId string, policyId string, tagId string) ApiIamOrganisationPolicyTagDeleteRequest {
	return ApiIamOrganisationPolicyTagDeleteRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
		tagId: tagId,
	}
}

/*
 * Execute executes the request
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagDeleteExecute(r ApiIamOrganisationPolicyTagDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyTagDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/tag/{tagId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tagId"+"}", _neturl.PathEscape(parameterToString(r.tagId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyTagGetRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	tagId string
}


func (r ApiIamOrganisationPolicyTagGetRequest) Execute() (Tag, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyTagGetExecute(r)
}

/*
 * IamOrganisationPolicyTagGet Get iam/policy.tag
 * Get iam/policy.tag
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @param tagId tagId
 * @return ApiIamOrganisationPolicyTagGetRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagGet(ctx _context.Context, organisationId string, policyId string, tagId string) ApiIamOrganisationPolicyTagGetRequest {
	return ApiIamOrganisationPolicyTagGetRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
		tagId: tagId,
	}
}

/*
 * Execute executes the request
 * @return Tag
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagGetExecute(r ApiIamOrganisationPolicyTagGetRequest) (Tag, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyTagGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/tag/{tagId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tagId"+"}", _neturl.PathEscape(parameterToString(r.tagId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyTagListRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
}


func (r ApiIamOrganisationPolicyTagListRequest) Execute() ([]Tag, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyTagListExecute(r)
}

/*
 * IamOrganisationPolicyTagList List iam/policy.tag
 * List iam/policy.tag
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyTagListRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagList(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyTagListRequest {
	return ApiIamOrganisationPolicyTagListRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return []Tag
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagListExecute(r ApiIamOrganisationPolicyTagListRequest) ([]Tag, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyTagList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/tag"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyTagPutRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	tag *[]Tag
}

func (r ApiIamOrganisationPolicyTagPutRequest) Tag(tag []Tag) ApiIamOrganisationPolicyTagPutRequest {
	r.tag = &tag
	return r
}

func (r ApiIamOrganisationPolicyTagPutRequest) Execute() ([]Tag, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyTagPutExecute(r)
}

/*
 * IamOrganisationPolicyTagPut Replace iam/policy.tag
 * Replace iam/policy.tag
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyTagPutRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagPut(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyTagPutRequest {
	return ApiIamOrganisationPolicyTagPutRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return []Tag
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyTagPutExecute(r ApiIamOrganisationPolicyTagPutRequest) ([]Tag, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyTagPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}/tag"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.tag == nil {
		return localVarReturnValue, nil, reportError("tag is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tag
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIamOrganisationPolicyUpdateRequest struct {
	ctx _context.Context
	ApiService *IamOrganisationPolicyApiService
	organisationId string
	policyId string
	iamProjectPolicyUpdate *IamProjectPolicyUpdate
}

func (r ApiIamOrganisationPolicyUpdateRequest) IamProjectPolicyUpdate(iamProjectPolicyUpdate IamProjectPolicyUpdate) ApiIamOrganisationPolicyUpdateRequest {
	r.iamProjectPolicyUpdate = &iamProjectPolicyUpdate
	return r
}

func (r ApiIamOrganisationPolicyUpdateRequest) Execute() (Policy, *_nethttp.Response, error) {
	return r.ApiService.IamOrganisationPolicyUpdateExecute(r)
}

/*
 * IamOrganisationPolicyUpdate Update iam/policy
 * Returns modified policy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param organisationId Organisation Id
 * @param policyId Policy Id
 * @return ApiIamOrganisationPolicyUpdateRequest
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyUpdate(ctx _context.Context, organisationId string, policyId string) ApiIamOrganisationPolicyUpdateRequest {
	return ApiIamOrganisationPolicyUpdateRequest{
		ApiService: a,
		ctx: ctx,
		organisationId: organisationId,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return Policy
 */
func (a *IamOrganisationPolicyApiService) IamOrganisationPolicyUpdateExecute(r ApiIamOrganisationPolicyUpdateRequest) (Policy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Policy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IamOrganisationPolicyApiService.IamOrganisationPolicyUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iam/organisation/{organisationId}/policy/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organisationId"+"}", _neturl.PathEscape(parameterToString(r.organisationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.iamProjectPolicyUpdate == nil {
		return localVarReturnValue, nil, reportError("iamProjectPolicyUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.iamProjectPolicyUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
