/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// UserLimit struct for UserLimit
type UserLimit struct {
	Organisation *UserLimitOrganisation `json:"organisation,omitempty"`
}

// NewUserLimit instantiates a new UserLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLimit() *UserLimit {
	this := UserLimit{}
	return &this
}

// NewUserLimitWithDefaults instantiates a new UserLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLimitWithDefaults() *UserLimit {
	this := UserLimit{}
	return &this
}

// GetOrganisation returns the Organisation field value if set, zero value otherwise.
func (o *UserLimit) GetOrganisation() UserLimitOrganisation {
	if o == nil || o.Organisation == nil {
		var ret UserLimitOrganisation
		return ret
	}
	return *o.Organisation
}

// GetOrganisationOk returns a tuple with the Organisation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimit) GetOrganisationOk() (*UserLimitOrganisation, bool) {
	if o == nil || o.Organisation == nil {
		return nil, false
	}
	return o.Organisation, true
}

// HasOrganisation returns a boolean if a field has been set.
func (o *UserLimit) HasOrganisation() bool {
	if o != nil && o.Organisation != nil {
		return true
	}

	return false
}

// SetOrganisation gets a reference to the given UserLimitOrganisation and assigns it to the Organisation field.
func (o *UserLimit) SetOrganisation(v UserLimitOrganisation) {
	o.Organisation = &v
}

func (o UserLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Organisation != nil {
		toSerialize["organisation"] = o.Organisation
	}
	return json.Marshal(toSerialize)
}

type NullableUserLimit struct {
	value *UserLimit
	isSet bool
}

func (v NullableUserLimit) Get() *UserLimit {
	return v.value
}

func (v *NullableUserLimit) Set(val *UserLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLimit(val *UserLimit) *NullableUserLimit {
	return &NullableUserLimit{value: val, isSet: true}
}

func (v NullableUserLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


