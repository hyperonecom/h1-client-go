/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PointValue struct for PointValue
type PointValue struct {
	Time time.Time `json:"time"`
	Value float32 `json:"value"`
}

// NewPointValue instantiates a new PointValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointValue(time time.Time, value float32) *PointValue {
	this := PointValue{}
	this.Time = time
	this.Value = value
	return &this
}

// NewPointValueWithDefaults instantiates a new PointValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointValueWithDefaults() *PointValue {
	this := PointValue{}
	return &this
}

// GetTime returns the Time field value
func (o *PointValue) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *PointValue) GetTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *PointValue) SetTime(v time.Time) {
	o.Time = v
}

// GetValue returns the Value field value
func (o *PointValue) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PointValue) GetValueOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PointValue) SetValue(v float32) {
	o.Value = v
}

func (o PointValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePointValue struct {
	value *PointValue
	isSet bool
}

func (v NullablePointValue) Get() *PointValue {
	return v.value
}

func (v *NullablePointValue) Set(val *PointValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePointValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePointValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointValue(val *PointValue) *NullablePointValue {
	return &NullablePointValue{value: val, isSet: true}
}

func (v NullablePointValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


