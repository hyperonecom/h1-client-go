/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReconciliationTargetResource struct for ReconciliationTargetResource
type ReconciliationTargetResource struct {
	Id *string `json:"id,omitempty"`
	Plan []ReconciliationTargetPlan `json:"plan,omitempty"`
	Usage *float32 `json:"usage,omitempty"`
}

// NewReconciliationTargetResource instantiates a new ReconciliationTargetResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconciliationTargetResource() *ReconciliationTargetResource {
	this := ReconciliationTargetResource{}
	return &this
}

// NewReconciliationTargetResourceWithDefaults instantiates a new ReconciliationTargetResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconciliationTargetResourceWithDefaults() *ReconciliationTargetResource {
	this := ReconciliationTargetResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReconciliationTargetResource) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTargetResource) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReconciliationTargetResource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReconciliationTargetResource) SetId(v string) {
	o.Id = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *ReconciliationTargetResource) GetPlan() []ReconciliationTargetPlan {
	if o == nil || o.Plan == nil {
		var ret []ReconciliationTargetPlan
		return ret
	}
	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTargetResource) GetPlanOk() ([]ReconciliationTargetPlan, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *ReconciliationTargetResource) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given []ReconciliationTargetPlan and assigns it to the Plan field.
func (o *ReconciliationTargetResource) SetPlan(v []ReconciliationTargetPlan) {
	o.Plan = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ReconciliationTargetResource) GetUsage() float32 {
	if o == nil || o.Usage == nil {
		var ret float32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconciliationTargetResource) GetUsageOk() (*float32, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ReconciliationTargetResource) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given float32 and assigns it to the Usage field.
func (o *ReconciliationTargetResource) SetUsage(v float32) {
	o.Usage = &v
}

func (o ReconciliationTargetResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableReconciliationTargetResource struct {
	value *ReconciliationTargetResource
	isSet bool
}

func (v NullableReconciliationTargetResource) Get() *ReconciliationTargetResource {
	return v.value
}

func (v *NullableReconciliationTargetResource) Set(val *ReconciliationTargetResource) {
	v.value = val
	v.isSet = true
}

func (v NullableReconciliationTargetResource) IsSet() bool {
	return v.isSet
}

func (v *NullableReconciliationTargetResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconciliationTargetResource(val *ReconciliationTargetResource) *NullableReconciliationTargetResource {
	return &NullableReconciliationTargetResource{value: val, isSet: true}
}

func (v NullableReconciliationTargetResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconciliationTargetResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


