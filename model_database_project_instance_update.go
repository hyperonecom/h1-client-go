/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DatabaseProjectInstanceUpdate struct for DatabaseProjectInstanceUpdate
type DatabaseProjectInstanceUpdate struct {
	Name *string `json:"name,omitempty"`
	Plan *string `json:"plan,omitempty"`
}

// NewDatabaseProjectInstanceUpdate instantiates a new DatabaseProjectInstanceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseProjectInstanceUpdate() *DatabaseProjectInstanceUpdate {
	this := DatabaseProjectInstanceUpdate{}
	return &this
}

// NewDatabaseProjectInstanceUpdateWithDefaults instantiates a new DatabaseProjectInstanceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseProjectInstanceUpdateWithDefaults() *DatabaseProjectInstanceUpdate {
	this := DatabaseProjectInstanceUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatabaseProjectInstanceUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseProjectInstanceUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatabaseProjectInstanceUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatabaseProjectInstanceUpdate) SetName(v string) {
	o.Name = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *DatabaseProjectInstanceUpdate) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseProjectInstanceUpdate) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *DatabaseProjectInstanceUpdate) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *DatabaseProjectInstanceUpdate) SetPlan(v string) {
	o.Plan = &v
}

func (o DatabaseProjectInstanceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseProjectInstanceUpdate struct {
	value *DatabaseProjectInstanceUpdate
	isSet bool
}

func (v NullableDatabaseProjectInstanceUpdate) Get() *DatabaseProjectInstanceUpdate {
	return v.value
}

func (v *NullableDatabaseProjectInstanceUpdate) Set(val *DatabaseProjectInstanceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseProjectInstanceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseProjectInstanceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseProjectInstanceUpdate(val *DatabaseProjectInstanceUpdate) *NullableDatabaseProjectInstanceUpdate {
	return &NullableDatabaseProjectInstanceUpdate{value: val, isSet: true}
}

func (v NullableDatabaseProjectInstanceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseProjectInstanceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


