/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// WebsiteLink struct for WebsiteLink
type WebsiteLink struct {
	Id *string `json:"id,omitempty"`
	Actor string `json:"actor"`
	Purpose string `json:"purpose"`
	Resource string `json:"resource"`
}

// NewWebsiteLink instantiates a new WebsiteLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteLink(actor string, purpose string, resource string) *WebsiteLink {
	this := WebsiteLink{}
	this.Actor = actor
	this.Purpose = purpose
	this.Resource = resource
	return &this
}

// NewWebsiteLinkWithDefaults instantiates a new WebsiteLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteLinkWithDefaults() *WebsiteLink {
	this := WebsiteLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WebsiteLink) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteLink) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WebsiteLink) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WebsiteLink) SetId(v string) {
	o.Id = &v
}

// GetActor returns the Actor field value
func (o *WebsiteLink) GetActor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *WebsiteLink) GetActorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *WebsiteLink) SetActor(v string) {
	o.Actor = v
}

// GetPurpose returns the Purpose field value
func (o *WebsiteLink) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *WebsiteLink) GetPurposeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *WebsiteLink) SetPurpose(v string) {
	o.Purpose = v
}

// GetResource returns the Resource field value
func (o *WebsiteLink) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *WebsiteLink) GetResourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *WebsiteLink) SetResource(v string) {
	o.Resource = v
}

func (o WebsiteLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["actor"] = o.Actor
	}
	if true {
		toSerialize["purpose"] = o.Purpose
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableWebsiteLink struct {
	value *WebsiteLink
	isSet bool
}

func (v NullableWebsiteLink) Get() *WebsiteLink {
	return v.value
}

func (v *NullableWebsiteLink) Set(val *WebsiteLink) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteLink) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteLink(val *WebsiteLink) *NullableWebsiteLink {
	return &NullableWebsiteLink{value: val, isSet: true}
}

func (v NullableWebsiteLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


