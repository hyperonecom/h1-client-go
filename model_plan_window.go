/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlanWindow struct for PlanWindow
type PlanWindow struct {
	Id *string `json:"id,omitempty"`
	Interval *string `json:"interval,omitempty"`
}

// NewPlanWindow instantiates a new PlanWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanWindow() *PlanWindow {
	this := PlanWindow{}
	return &this
}

// NewPlanWindowWithDefaults instantiates a new PlanWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWindowWithDefaults() *PlanWindow {
	this := PlanWindow{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanWindow) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanWindow) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanWindow) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlanWindow) SetId(v string) {
	o.Id = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *PlanWindow) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanWindow) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *PlanWindow) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *PlanWindow) SetInterval(v string) {
	o.Interval = &v
}

func (o PlanWindow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	return json.Marshal(toSerialize)
}

type NullablePlanWindow struct {
	value *PlanWindow
	isSet bool
}

func (v NullablePlanWindow) Get() *PlanWindow {
	return v.value
}

func (v *NullablePlanWindow) Set(val *PlanWindow) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanWindow) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanWindow(val *PlanWindow) *NullablePlanWindow {
	return &NullablePlanWindow{value: val, isSet: true}
}

func (v NullablePlanWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


