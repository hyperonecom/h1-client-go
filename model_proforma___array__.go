/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ProformaArray struct for ProformaArray
type ProformaArray struct {
	Id *string `json:"id,omitempty"`
	InvoiceNo *string `json:"invoiceNo,omitempty"`
	IssueDate *time.Time `json:"issueDate,omitempty"`
	Project *string `json:"project,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// NewProformaArray instantiates a new ProformaArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProformaArray() *ProformaArray {
	this := ProformaArray{}
	return &this
}

// NewProformaArrayWithDefaults instantiates a new ProformaArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProformaArrayWithDefaults() *ProformaArray {
	this := ProformaArray{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProformaArray) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProformaArray) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProformaArray) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProformaArray) SetId(v string) {
	o.Id = &v
}

// GetInvoiceNo returns the InvoiceNo field value if set, zero value otherwise.
func (o *ProformaArray) GetInvoiceNo() string {
	if o == nil || o.InvoiceNo == nil {
		var ret string
		return ret
	}
	return *o.InvoiceNo
}

// GetInvoiceNoOk returns a tuple with the InvoiceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProformaArray) GetInvoiceNoOk() (*string, bool) {
	if o == nil || o.InvoiceNo == nil {
		return nil, false
	}
	return o.InvoiceNo, true
}

// HasInvoiceNo returns a boolean if a field has been set.
func (o *ProformaArray) HasInvoiceNo() bool {
	if o != nil && o.InvoiceNo != nil {
		return true
	}

	return false
}

// SetInvoiceNo gets a reference to the given string and assigns it to the InvoiceNo field.
func (o *ProformaArray) SetInvoiceNo(v string) {
	o.InvoiceNo = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *ProformaArray) GetIssueDate() time.Time {
	if o == nil || o.IssueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProformaArray) GetIssueDateOk() (*time.Time, bool) {
	if o == nil || o.IssueDate == nil {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *ProformaArray) HasIssueDate() bool {
	if o != nil && o.IssueDate != nil {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given time.Time and assigns it to the IssueDate field.
func (o *ProformaArray) SetIssueDate(v time.Time) {
	o.IssueDate = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProformaArray) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProformaArray) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProformaArray) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ProformaArray) SetProject(v string) {
	o.Project = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ProformaArray) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProformaArray) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ProformaArray) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ProformaArray) SetSummary(v string) {
	o.Summary = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ProformaArray) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProformaArray) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ProformaArray) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ProformaArray) SetUri(v string) {
	o.Uri = &v
}

func (o ProformaArray) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InvoiceNo != nil {
		toSerialize["invoiceNo"] = o.InvoiceNo
	}
	if o.IssueDate != nil {
		toSerialize["issueDate"] = o.IssueDate
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullableProformaArray struct {
	value *ProformaArray
	isSet bool
}

func (v NullableProformaArray) Get() *ProformaArray {
	return v.value
}

func (v *NullableProformaArray) Set(val *ProformaArray) {
	v.value = val
	v.isSet = true
}

func (v NullableProformaArray) IsSet() bool {
	return v.isSet
}

func (v *NullableProformaArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProformaArray(val *ProformaArray) *NullableProformaArray {
	return &NullableProformaArray{value: val, isSet: true}
}

func (v NullableProformaArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProformaArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


