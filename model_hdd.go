/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Hdd struct for Hdd
type Hdd struct {
	MaximumIOPS *float32 `json:"maximumIOPS,omitempty"`
	ControllerType *string `json:"controllerType,omitempty"`
	ControllerNumber *string `json:"controllerNumber,omitempty"`
	ControllerLocation *float32 `json:"controllerLocation,omitempty"`
	Disk *string `json:"disk,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewHdd instantiates a new Hdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHdd() *Hdd {
	this := Hdd{}
	return &this
}

// NewHddWithDefaults instantiates a new Hdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHddWithDefaults() *Hdd {
	this := Hdd{}
	return &this
}

// GetMaximumIOPS returns the MaximumIOPS field value if set, zero value otherwise.
func (o *Hdd) GetMaximumIOPS() float32 {
	if o == nil || o.MaximumIOPS == nil {
		var ret float32
		return ret
	}
	return *o.MaximumIOPS
}

// GetMaximumIOPSOk returns a tuple with the MaximumIOPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetMaximumIOPSOk() (*float32, bool) {
	if o == nil || o.MaximumIOPS == nil {
		return nil, false
	}
	return o.MaximumIOPS, true
}

// HasMaximumIOPS returns a boolean if a field has been set.
func (o *Hdd) HasMaximumIOPS() bool {
	if o != nil && o.MaximumIOPS != nil {
		return true
	}

	return false
}

// SetMaximumIOPS gets a reference to the given float32 and assigns it to the MaximumIOPS field.
func (o *Hdd) SetMaximumIOPS(v float32) {
	o.MaximumIOPS = &v
}

// GetControllerType returns the ControllerType field value if set, zero value otherwise.
func (o *Hdd) GetControllerType() string {
	if o == nil || o.ControllerType == nil {
		var ret string
		return ret
	}
	return *o.ControllerType
}

// GetControllerTypeOk returns a tuple with the ControllerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetControllerTypeOk() (*string, bool) {
	if o == nil || o.ControllerType == nil {
		return nil, false
	}
	return o.ControllerType, true
}

// HasControllerType returns a boolean if a field has been set.
func (o *Hdd) HasControllerType() bool {
	if o != nil && o.ControllerType != nil {
		return true
	}

	return false
}

// SetControllerType gets a reference to the given string and assigns it to the ControllerType field.
func (o *Hdd) SetControllerType(v string) {
	o.ControllerType = &v
}

// GetControllerNumber returns the ControllerNumber field value if set, zero value otherwise.
func (o *Hdd) GetControllerNumber() string {
	if o == nil || o.ControllerNumber == nil {
		var ret string
		return ret
	}
	return *o.ControllerNumber
}

// GetControllerNumberOk returns a tuple with the ControllerNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetControllerNumberOk() (*string, bool) {
	if o == nil || o.ControllerNumber == nil {
		return nil, false
	}
	return o.ControllerNumber, true
}

// HasControllerNumber returns a boolean if a field has been set.
func (o *Hdd) HasControllerNumber() bool {
	if o != nil && o.ControllerNumber != nil {
		return true
	}

	return false
}

// SetControllerNumber gets a reference to the given string and assigns it to the ControllerNumber field.
func (o *Hdd) SetControllerNumber(v string) {
	o.ControllerNumber = &v
}

// GetControllerLocation returns the ControllerLocation field value if set, zero value otherwise.
func (o *Hdd) GetControllerLocation() float32 {
	if o == nil || o.ControllerLocation == nil {
		var ret float32
		return ret
	}
	return *o.ControllerLocation
}

// GetControllerLocationOk returns a tuple with the ControllerLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetControllerLocationOk() (*float32, bool) {
	if o == nil || o.ControllerLocation == nil {
		return nil, false
	}
	return o.ControllerLocation, true
}

// HasControllerLocation returns a boolean if a field has been set.
func (o *Hdd) HasControllerLocation() bool {
	if o != nil && o.ControllerLocation != nil {
		return true
	}

	return false
}

// SetControllerLocation gets a reference to the given float32 and assigns it to the ControllerLocation field.
func (o *Hdd) SetControllerLocation(v float32) {
	o.ControllerLocation = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *Hdd) GetDisk() string {
	if o == nil || o.Disk == nil {
		var ret string
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetDiskOk() (*string, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *Hdd) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given string and assigns it to the Disk field.
func (o *Hdd) SetDisk(v string) {
	o.Disk = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Hdd) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hdd) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Hdd) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Hdd) SetId(v string) {
	o.Id = &v
}

func (o Hdd) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaximumIOPS != nil {
		toSerialize["maximumIOPS"] = o.MaximumIOPS
	}
	if o.ControllerType != nil {
		toSerialize["controllerType"] = o.ControllerType
	}
	if o.ControllerNumber != nil {
		toSerialize["controllerNumber"] = o.ControllerNumber
	}
	if o.ControllerLocation != nil {
		toSerialize["controllerLocation"] = o.ControllerLocation
	}
	if o.Disk != nil {
		toSerialize["disk"] = o.Disk
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableHdd struct {
	value *Hdd
	isSet bool
}

func (v NullableHdd) Get() *Hdd {
	return v.value
}

func (v *NullableHdd) Set(val *Hdd) {
	v.value = val
	v.isSet = true
}

func (v NullableHdd) IsSet() bool {
	return v.isSet
}

func (v *NullableHdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHdd(val *Hdd) *NullableHdd {
	return &NullableHdd{value: val, isSet: true}
}

func (v NullableHdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


