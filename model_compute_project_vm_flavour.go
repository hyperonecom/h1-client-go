/*
 * HyperOne
 *
 * HyperOne API
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package h1

import (
	"encoding/json"
)

// ComputeProjectVmFlavour struct for ComputeProjectVmFlavour
type ComputeProjectVmFlavour struct {
	Service string `json:"service"`
}

// NewComputeProjectVmFlavour instantiates a new ComputeProjectVmFlavour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeProjectVmFlavour(service string) *ComputeProjectVmFlavour {
	this := ComputeProjectVmFlavour{}
	this.Service = service
	return &this
}

// NewComputeProjectVmFlavourWithDefaults instantiates a new ComputeProjectVmFlavour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeProjectVmFlavourWithDefaults() *ComputeProjectVmFlavour {
	this := ComputeProjectVmFlavour{}
	return &this
}

// GetService returns the Service field value
func (o *ComputeProjectVmFlavour) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *ComputeProjectVmFlavour) GetServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *ComputeProjectVmFlavour) SetService(v string) {
	o.Service = v
}

func (o ComputeProjectVmFlavour) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["service"] = o.Service
	}
	return json.Marshal(toSerialize)
}

type NullableComputeProjectVmFlavour struct {
	value *ComputeProjectVmFlavour
	isSet bool
}

func (v NullableComputeProjectVmFlavour) Get() *ComputeProjectVmFlavour {
	return v.value
}

func (v *NullableComputeProjectVmFlavour) Set(val *ComputeProjectVmFlavour) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeProjectVmFlavour) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeProjectVmFlavour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeProjectVmFlavour(val *ComputeProjectVmFlavour) *NullableComputeProjectVmFlavour {
	return &NullableComputeProjectVmFlavour{value: val, isSet: true}
}

func (v NullableComputeProjectVmFlavour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeProjectVmFlavour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


