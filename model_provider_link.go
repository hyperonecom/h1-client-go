/*
HyperOne

HyperOne API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProviderLink struct for ProviderLink
type ProviderLink struct {
	Id *string `json:"id,omitempty"`
	Actor string `json:"actor"`
	Purpose string `json:"purpose"`
	Resource string `json:"resource"`
}

// NewProviderLink instantiates a new ProviderLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderLink(actor string, purpose string, resource string) *ProviderLink {
	this := ProviderLink{}
	this.Actor = actor
	this.Purpose = purpose
	this.Resource = resource
	return &this
}

// NewProviderLinkWithDefaults instantiates a new ProviderLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderLinkWithDefaults() *ProviderLink {
	this := ProviderLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProviderLink) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderLink) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProviderLink) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProviderLink) SetId(v string) {
	o.Id = &v
}

// GetActor returns the Actor field value
func (o *ProviderLink) GetActor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *ProviderLink) GetActorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *ProviderLink) SetActor(v string) {
	o.Actor = v
}

// GetPurpose returns the Purpose field value
func (o *ProviderLink) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *ProviderLink) GetPurposeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *ProviderLink) SetPurpose(v string) {
	o.Purpose = v
}

// GetResource returns the Resource field value
func (o *ProviderLink) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *ProviderLink) GetResourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *ProviderLink) SetResource(v string) {
	o.Resource = v
}

func (o ProviderLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["actor"] = o.Actor
	}
	if true {
		toSerialize["purpose"] = o.Purpose
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableProviderLink struct {
	value *ProviderLink
	isSet bool
}

func (v NullableProviderLink) Get() *ProviderLink {
	return v.value
}

func (v *NullableProviderLink) Set(val *ProviderLink) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderLink) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderLink(val *ProviderLink) *NullableProviderLink {
	return &NullableProviderLink{value: val, isSet: true}
}

func (v NullableProviderLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


